services:
  db:
    image: postgres:12
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - "5432:5432"
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - app-redis-data:/data

  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark

  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - "1080:1080"
      - "1025:1025"

  prestart:
    build:
      context: ./backend
    # command: sleep infinity  # Infinite loop to keep container alive doing nothing
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - REDIS_SERVER=redis
      - SMTP_HOST=mailcatcher

  backend:
    build:
      context: ./backend
    # command: sleep infinity  # Infinite loop to keep container alive doing nothing
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
      redis:
        condition: service_started
      mailcatcher:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8000/api/v1/utils/health-check/",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    # command: sleep infinity  # Infinite loop to keep container alive doing nothing
    command:
      - fastapi
      - run
      - --reload
      - "app/main.py"
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - REDIS_SERVER=redis
      - SMTP_HOST=mailcatcher
    develop:
      watch:
        - path: ./backend
          action: sync
          target: /app
          ignore:
            - ./backend/.venv
            - .venv
        - path: ./backend/pyproject.toml
          action: rebuild
    # TODO: remove once coverage is done locally
    volumes:
      - ./backend/htmlcov:/app/htmlcov

  builder:
    build:
      context: ./backend
      dockerfile: Dockerfile.builder
    ports:
      - "8088:8080"
    privileged: true
    env_file:
      - .env
    environment:
      - CI=true
      - POSTGRES_SERVER=db
    develop:
      watch:
        - path: ./backend
          action: sync
          target: /app
          ignore:
            - ./backend/.venv
            - .venv
        - path: ./backend/pyproject.toml
          action: rebuild
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8080/health-check/",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  frontend:
    build:
      context: ./frontend
      args:
        - VITE_API_URL=${API_HOST?Variable not set}
        - NODE_ENV=production
    ports:
      - "5173:80"

  playwright:
    build:
      context: ./frontend
      dockerfile: Dockerfile.playwright
      args:
        - VITE_API_URL=http://backend:8000
        - NODE_ENV=production
    ipc: host
    environment:
      - VITE_API_URL=http://backend:8000
      - MAILCATCHER_HOST=http://mailcatcher:1080
      # For the reports when run locally
      - PLAYWRIGHT_HTML_HOST=0.0.0.0
      - CI=${CI}
    volumes:
      - ./frontend/blob-report:/app/blob-report
      - ./frontend/test-results:/app/test-results
    ports:
      - 9323:9323

volumes:
  app-db-data:
  app-redis-data:
