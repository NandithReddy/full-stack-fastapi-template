name: Deploy Builder

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy to, development, staging, production
        required: true
        type: environment
        default: staging

env:
  ECR_REPOSITORY: fastapicloud-builder

jobs:
  changes:
    runs-on: depot-ubuntu-22.04
    # Required permissions
    permissions:
      pull-requests: read
      contents: read
    # Set job outputs to values from filter step
    outputs:
      changed: ${{ steps.filter.outputs.changed }}
    steps:
    - uses: actions/checkout@v4
    # For pull requests it's not necessary to checkout the code but for the main branch it is
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          changed:
            - backend/**
            - .env
            - infra/k8s/builder/builder.yaml
            - .github/workflows/deploy-builder.yml

  deploy-builder:
    needs:
      - changes
    if: ${{ needs.changes.outputs.changed == 'true' }}
    name: Deploy Builder
    strategy:
      matrix:
        # Two environments by default: staging and development, but can be overridden by the user in a workflow dispatch
        # TODO: once production is stable, disallow deploying to production from workflow_dispatch
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson('["staging", "development"]') }}
    env:
      IMAGE_TAG: ${{ matrix.environment }}-${{ github.sha }}
    runs-on: depot-ubuntu-22.04
    # Permissions for Depot Docker build
    permissions:
      contents: read
      id-token: write
    environment: ${{ matrix.environment }}
    steps:
    - uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - uses: azure/k8s-set-context@v4
      with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_DATA }}
    - name: Login to Amazon ECR
      with:
        mask-password: True
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - uses: depot/setup-action@v1
    - name: Build and push Docker images to Amazon ECR
      uses: depot/build-push-action@v1
      id: docker-build
      with:
        project: ${{ vars.DEPOT_PROJECT_ID }}
        push: true
        tags: |
          ${{steps.login-ecr.outputs.registry}}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        context: ./backend/
        file: ./backend/Dockerfile.builder
    - name: Update builder deployment
      run: envsubst < infra/k8s/builder/builder.yaml | kubectl apply -f -
      env:
        IMAGE: ${{steps.login-ecr.outputs.registry}}/${{ env.ECR_REPOSITORY }}@${{ steps.docker-build.outputs.digest }}
        DEPLOYMENTS_DOMAIN: "${{ vars.DEPLOYMENTS_DOMAIN }}"
        ENVIRONMENT: ${{ matrix.environment }}
        POSTGRES_SERVER: "${{ vars.POSTGRES_SERVER }}"
        POSTGRES_PORT: "${{ vars.POSTGRES_PORT }}"
        POSTGRES_DB: "${{ vars.POSTGRES_DB }}"
        POSTGRES_USER: "${{ vars.POSTGRES_USER }}"
        POSTGRES_SSL_ENABLED: "${{ vars.POSTGRES_SSL_ENABLED }}"
        ECR_REGISTRY_URL: "${{ vars.ECR_REGISTRY_URL }}"
        AWS_REGION: "${{ vars.AWS_REGION }}"
        DEPOT_PROJECT_ID: "${{ vars.DEPOT_PROJECT_ID }}"
        DEPLOYMENTS_BUCKET_NAME: "${{ vars.DEPLOYMENTS_BUCKET_NAME }}"
        BUILDER_SENTRY_DSN: "${{ vars.BUILDER_SENTRY_DSN }}"
        CLOUDFLARE_ACCOUNT_ID: "${{ vars.CLOUDFLARE_ACCOUNT_ID }}"
        CLOUDFLARE_ZONE_ID: "${{ vars.CLOUDFLARE_ZONE_ID }}"
        CLOUDFLARE_API_TOKEN_SSL: "${{ secrets.CLOUDFLARE_API_TOKEN_SSL }}"
        LOGFIRE_TOKEN: "${{ secrets.LOGFIRE_TOKEN }}"
        NATS_HOST_NAME: "${{ vars.NATS_HOST_NAME }}"

        # Secrets for the builder
        POSTGRES_PASSWORD: "${{ secrets.POSTGRES_PASSWORD }}"
        DEPOT_TOKEN: "${{ secrets.DEPOT_TOKEN }}"
        BUILDER_API_KEY: "${{ secrets.BUILDER_API_KEY }}"
        BUILDER_API_URL: "${{ vars.BUILDER_API_URL }}"

  # https://github.com/marketplace/actions/alls-green#why
  alls-green-deploy-builder:  # This job does nothing and is only used for the branch protection
    if: always()
    needs:
      - deploy-builder
    runs-on: depot-ubuntu-22.04
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
          allowed-skips: deploy-builder
