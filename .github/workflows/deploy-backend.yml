name: Deploy Backend

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy to, development, staging, production
        required: true
        type: environment
        default: staging

env:
  ECR_REPOSITORY: fastapicloud-backend

jobs:
  changes:
    runs-on: depot-ubuntu-22.04
    # Required permissions
    permissions:
      pull-requests: read
      contents: read
    # Set job outputs to values from filter step
    outputs:
      changed: ${{ steps.filter.outputs.changed }}
    steps:
    - uses: actions/checkout@v4
    # For pull requests it's not necessary to checkout the code but for the main branch it is
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          changed:
            - backend/**
            - packages/**
            - uv.lock
            - pyproject.toml
            - .env
            - .github/workflows/deploy-backend.yml

  deploy-backend:
    needs:
      - changes
    if: ${{ needs.changes.outputs.changed == 'true' }}
    name: Deploy Backend
    strategy:
      matrix:
        # Two environments by default: staging and development, but can be overridden by the user in a workflow dispatch
        # TODO: once production is stable, disallow deploying to production from workflow_dispatch
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson('["staging", "development", "production"]') }}
    runs-on: depot-ubuntu-22.04
    # Permissions for Depot Docker build
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    environment: ${{ matrix.environment }}
    env:
      IMAGE_TAG: ${{ matrix.environment }}-${{ github.sha }}
    steps:
    - uses: actions/checkout@v4
      with:
        # To allow deployment to commit to the main branch
        # and for now, using the latest-changes token
        token: ${{ secrets.FASTAPI_CLOUD_LATEST_CHANGES }}
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - uses: azure/k8s-set-context@v4
      with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_DATA }}
    - name: Login to Amazon ECR
      with:
        mask-password: True
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - uses: depot/setup-action@v1
    - name: Build and push Docker images to Amazon ECR
      uses: depot/build-push-action@v1
      id: docker-build
      with:
        project: ${{ vars.DEPOT_PROJECT_ID }}
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        context: .
        file: ./backend/Dockerfile
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.8"
    - name: Run migrations
      run: uv run bash scripts/prestart.sh
      working-directory: backend
      env:
        # Env vars for the app
        FRONTEND_HOST: "${{ vars.FRONTEND_HOST }}"
        API_HOST: "${{ vars.API_HOST }}"
        API_DOMAIN: "${{ vars.API_DOMAIN }}"
        DEPLOYMENTS_DOMAIN: "${{ vars.DEPLOYMENTS_DOMAIN }}"
        ENVIRONMENT: ${{ matrix.environment }}
        PROJECT_NAME: "${{ vars.PROJECT_NAME }}"
        BACKEND_CORS_ORIGINS: "${{ vars.BACKEND_CORS_ORIGINS }}"
        FIRST_SUPERUSER: "${{ vars.FIRST_SUPERUSER }}"
        FIRST_SUPERUSER_FULL_NAME: "${{ vars.FIRST_SUPERUSER_FULL_NAME }}"
        SMTP_HOST: "${{ vars.SMTP_HOST }}"
        SMTP_USER: "${{ vars.SMTP_USER }}"
        EMAILS_FROM_EMAIL: "${{ vars.EMAILS_FROM_EMAIL }}"
        SMTP_TLS: "${{ vars.SMTP_TLS }}"
        SMTP_SSL: "${{ vars.SMTP_SSL }}"
        SMTP_PORT: "${{ vars.SMTP_PORT }}"
        POSTGRES_SERVER: "${{ vars.POSTGRES_SERVER }}"
        POSTGRES_PORT: "${{ vars.POSTGRES_PORT }}"
        POSTGRES_DB: "${{ vars.POSTGRES_DB }}"
        POSTGRES_USER: "${{ vars.POSTGRES_USER }}"
        POSTGRES_SSL_ENABLED: "${{ vars.POSTGRES_SSL_ENABLED }}"
        REDIS_SERVER: "${{ vars.REDIS_SERVER }}"
        BACKEND_SENTRY_DSN: "${{ vars.BACKEND_SENTRY_DSN }}"
        DOCKER_IMAGE_BACKEND: "${{ vars.DOCKER_IMAGE_BACKEND }}"
        DOCKER_IMAGE_FRONTEND: "${{ vars.DOCKER_IMAGE_FRONTEND }}"
        DEPLOYMENTS_BUCKET_NAME: "${{ vars.DEPLOYMENTS_BUCKET_NAME }}"
        ECR_REGISTRY_URL: "${{ vars.ECR_REGISTRY_URL }}"
        BUILDER_QUEUE_NAME: "${{ vars.BUILDER_QUEUE_NAME }}"
        BUILDER_API_URL: "${{ vars.BUILDER_API_URL }}"
        SECRET_KEY: "${{ secrets.SECRET_KEY }}"
        FIRST_SUPERUSER_PASSWORD: "${{ secrets.FIRST_SUPERUSER_PASSWORD }}"
        SMTP_PASSWORD: "${{ secrets.SMTP_PASSWORD }}"
        POSTGRES_PASSWORD: "${{ secrets.POSTGRES_PASSWORD }}"
        EMAILABLE_KEY: "${{ secrets.EMAILABLE_KEY }}"
        BUILDER_API_KEY: "${{ secrets.BUILDER_API_KEY }}"
        LOGFIRE_TOKEN: "${{ secrets.LOGFIRE_TOKEN }}"
        NATS_HOST_NAME: "${{ vars.NATS_HOST_NAME }}"
        NATS_CREDS: "${{ secrets.NATS_CREDS }}"
        ENABLE_LOCALSTACK: "False"
        ALLOW_SIGNUP_TOKEN: "${{ secrets.ALLOW_SIGNUP_TOKEN }}"
        BACKEND_GITHUB_CLIENT_ID: "${{ secrets.BACKEND_GITHUB_CLIENT_ID }}"
        BACKEND_GITHUB_CLIENT_SECRET: "${{ secrets.BACKEND_GITHUB_CLIENT_SECRET }}"
    - name: Update ArgoCD image tag
      run: |
        argocd_file_path="infra/argocd/${{ matrix.environment }}/fastapicloud/fastapicloud.yaml"

        yq -i ".api.image.tag = \"$IMAGE_TAG\"" ${argocd_file_path}

        git config --global user.email "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
        git config --global user.name "github-actions[bot]"
        git add ${argocd_file_path}
        git commit -m "â¬† Deploy backend to ${{ matrix.environment }}" -m "[skip ci]"
        git push

  # https://github.com/marketplace/actions/alls-green#why
  alls-green-deploy-backend:  # This job does nothing and is only used for the branch protection
    if: always()
    needs:
      - deploy-backend
    runs-on: depot-ubuntu-22.04
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
          allowed-skips: deploy-backend
