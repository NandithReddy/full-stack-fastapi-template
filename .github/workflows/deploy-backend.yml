name: Deploy Backend

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy to, development, staging, production
        required: true
        type: environment
        default: staging

env:
  ECR_REPOSITORY: fastapicloud-backend

jobs:
  changes:
    runs-on: depot-ubuntu-22.04
    # Required permissions
    permissions:
      pull-requests: read
      contents: read
    # Set job outputs to values from filter step
    outputs:
      changed: ${{ steps.filter.outputs.changed }}
    steps:
    - uses: actions/checkout@v4
    # For pull requests it's not necessary to checkout the code but for the main branch it is
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          changed:
            - backend/**
            - .env
            - .github/workflows/deploy-backend.yml

  deploy-backend:
    needs:
      - changes
    if: ${{ needs.changes.outputs.changed == 'true' }}
    name: Deploy Backend
    strategy:
      matrix:
        # Two environments by default: staging and development, but can be overridden by the user in a workflow dispatch
        # TODO: once production is stable, disallow deploying to production from workflow_dispatch
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson('["staging", "development"]') }}
    runs-on: ${{ matrix.environment }}
    environment: ${{ matrix.environment }}
    env:
      IMAGE_TAG: ${{ matrix.environment }}-${{ github.sha }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "0.4.15"
    - name: Install kubectl
      uses: azure/setup-kubectl@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Login to Amazon ECR
      with:
        mask-password: True
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build and push Docker images to Amazon ECR
      uses: docker/build-push-action@v6
      id: docker-build
      with:
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        context: ./backend/
    - name: Run migrations
      run: uv run bash scripts/prestart.sh
      working-directory: backend
      env:
        # Env vars for the app
        DOMAIN: "${{ vars.DOMAIN }}"
        FRONTEND_HOST: "${{ vars.FRONTEND_HOST }}"
        API_HOST: "${{ vars.API_HOST }}"
        DEPLOYMENTS_DOMAIN: "${{ vars.DEPLOYMENTS_DOMAIN }}"
        ENVIRONMENT: ${{ matrix.environment }}
        PROJECT_NAME: "${{ vars.PROJECT_NAME }}"
        STACK_NAME: "${{ vars.STACK_NAME }}"
        BACKEND_CORS_ORIGINS: "${{ vars.BACKEND_CORS_ORIGINS }}"
        FIRST_SUPERUSER: "${{ vars.FIRST_SUPERUSER }}"
        FIRST_SUPERUSER_FULL_NAME: "${{ vars.FIRST_SUPERUSER_FULL_NAME }}"
        SMTP_HOST: "${{ vars.SMTP_HOST }}"
        SMTP_USER: "${{ vars.SMTP_USER }}"
        EMAILS_FROM_EMAIL: "${{ vars.EMAILS_FROM_EMAIL }}"
        SMTP_TLS: "${{ vars.SMTP_TLS }}"
        SMTP_SSL: "${{ vars.SMTP_SSL }}"
        SMTP_PORT: "${{ vars.SMTP_PORT }}"
        POSTGRES_SERVER: "${{ vars.POSTGRES_SERVER }}"
        POSTGRES_PORT: "${{ vars.POSTGRES_PORT }}"
        POSTGRES_DB: "${{ vars.POSTGRES_DB }}"
        POSTGRES_USER: "${{ vars.POSTGRES_USER }}"
        POSTGRES_SSL_ENABLED: "${{ vars.POSTGRES_SSL_ENABLED }}"
        REDIS_SERVER: "${{ vars.REDIS_SERVER }}"
        SENTRY_DSN: "${{ vars.SENTRY_DSN }}"
        DOCKER_IMAGE_BACKEND: "${{ vars.DOCKER_IMAGE_BACKEND }}"
        DOCKER_IMAGE_FRONTEND: "${{ vars.DOCKER_IMAGE_FRONTEND }}"
        AWS_DEPLOYMENT_BUCKET: "${{ vars.AWS_DEPLOYMENT_BUCKET }}"
        ECR_REGISTRY_URL: "${{ vars.ECR_REGISTRY_URL }}"

        # Secrets for the app
        SECRET_KEY: "${{ secrets.SECRET_KEY }}"
        FIRST_SUPERUSER_PASSWORD: "${{ secrets.FIRST_SUPERUSER_PASSWORD }}"
        SMTP_PASSWORD: "${{ secrets.SMTP_PASSWORD }}"
        POSTGRES_PASSWORD: "${{ secrets.POSTGRES_PASSWORD }}"
    - name: Update Knative Service image
      run: uv run typer --func deploy_cloud app.docker_builder run api $IMAGE_URL $IMAGE_DIGEST --min-scale 1
      working-directory: backend
      env:
        IMAGE_URL: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        IMAGE_DIGEST: ${{ steps.docker-build.outputs.digest }}

        # Env vars for the app
        DOMAIN: "${{ vars.DOMAIN }}"
        FRONTEND_HOST: "${{ vars.FRONTEND_HOST }}"
        API_HOST: "${{ vars.API_HOST }}"
        DEPLOYMENTS_DOMAIN: "${{ vars.DEPLOYMENTS_DOMAIN }}"
        ENVIRONMENT: ${{ matrix.environment }}
        PROJECT_NAME: "${{ vars.PROJECT_NAME }}"
        STACK_NAME: "${{ vars.STACK_NAME }}"
        BACKEND_CORS_ORIGINS: "${{ vars.BACKEND_CORS_ORIGINS }}"
        FIRST_SUPERUSER: "${{ vars.FIRST_SUPERUSER }}"
        FIRST_SUPERUSER_FULL_NAME: "${{ vars.FIRST_SUPERUSER_FULL_NAME }}"
        SMTP_HOST: "${{ vars.SMTP_HOST }}"
        SMTP_USER: "${{ vars.SMTP_USER }}"
        EMAILS_FROM_EMAIL: "${{ vars.EMAILS_FROM_EMAIL }}"
        SMTP_TLS: "${{ vars.SMTP_TLS }}"
        SMTP_SSL: "${{ vars.SMTP_SSL }}"
        SMTP_PORT: "${{ vars.SMTP_PORT }}"
        POSTGRES_SERVER: "${{ vars.POSTGRES_SERVER }}"
        POSTGRES_PORT: "${{ vars.POSTGRES_PORT }}"
        POSTGRES_DB: "${{ vars.POSTGRES_DB }}"
        POSTGRES_USER: "${{ vars.POSTGRES_USER }}"
        POSTGRES_SSL_ENABLED: "${{ vars.POSTGRES_SSL_ENABLED }}"
        REDIS_SERVER: "${{ vars.REDIS_SERVER }}"
        SENTRY_DSN: "${{ vars.SENTRY_DSN }}"
        DOCKER_IMAGE_BACKEND: "${{ vars.DOCKER_IMAGE_BACKEND }}"
        DOCKER_IMAGE_FRONTEND: "${{ vars.DOCKER_IMAGE_FRONTEND }}"
        AWS_DEPLOYMENT_BUCKET: "${{ vars.AWS_DEPLOYMENT_BUCKET }}"
        ECR_REGISTRY_URL: "${{ vars.ECR_REGISTRY_URL }}"

        # Secrets for the app
        SECRET_KEY: "${{ secrets.SECRET_KEY }}"
        FIRST_SUPERUSER_PASSWORD: "${{ secrets.FIRST_SUPERUSER_PASSWORD }}"
        SMTP_PASSWORD: "${{ secrets.SMTP_PASSWORD }}"
        POSTGRES_PASSWORD: "${{ secrets.POSTGRES_PASSWORD }}"

  # https://github.com/marketplace/actions/alls-green#why
  alls-green-deploy-backend:  # This job does nothing and is only used for the branch protection
    if: always()
    needs:
      - deploy-backend
    runs-on: depot-ubuntu-22.04
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
          allowed-skips: deploy-backend
