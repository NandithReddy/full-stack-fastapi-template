name: Deploy Builder

on:
  push:
    branches:
      - master
    paths:
      - 'backend/app/*'
      - 'backend/Dockerfile.builder'
      - 'backend/Dockerfile.build'
      - 'backend/builder_entrypoint.sh'
      - 'backend/pyproject.toml'
      - 'backend/uv.lock'
      - 'infra/k8s/knative/deployment-workflow/**'
      - '.github/workflows/deploy-builder-staging.yml'

env:
  ECR_REPOSITORY: fastapicloud-builder
  IMAGE_TAG: staging-${{ github.sha }}

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: staging
    environment: staging
    steps:
    - uses: actions/checkout@v4
    - name: Install kubectl
      uses: azure/setup-kubectl@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Login to Amazon ECR
      with:
        mask-password: True
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build and push Docker images to Amazon ECR
      uses: docker/build-push-action@v6
      id: docker-build
      with:
        push: true
        tags: |
          ${{steps.login-ecr.outputs.registry}}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        context: ./backend/
    - name: Update builder deployment
      env:
        IMAGE_DIGEST: ${{ steps.docker-build.outputs.digest }}
      # TODO: investigate if we can do this without modifying a file live that doesn't end up stored in git
      run: |
        sed -i "s|image: .*|image: $IMAGE_DIGEST|" infra/k8s/knative/deployment-workflow/dind-deployment.yaml
    - name: Update ConfigMap and Secret
      run: |
        cat <<EOF > infra/k8s/knative/deployment-workflow/docker-builder-configmap.yaml
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: docker-builder-config
        data:
          DOMAIN: "${{ vars.DOMAIN }}"
          FRONTEND_HOST: "${{ vars.FRONTEND_HOST }}"
          API_HOST: "${{ vars.API_HOST }}"
          ENVIRONMENT: "staging"
          PROJECT_NAME: "${{ vars.PROJECT_NAME }}"
          STACK_NAME: "${{ vars.STACK_NAME }}"
          BACKEND_CORS_ORIGINS: "${{ vars.BACKEND_CORS_ORIGINS }}"
          FIRST_SUPERUSER: "${{ vars.FIRST_SUPERUSER }}"
          FIRST_SUPERUSER_FULL_NAME: "${{ vars.FIRST_SUPERUSER_FULL_NAME }}"
          USERS_OPEN_REGISTRATION: "${{ vars.USERS_OPEN_REGISTRATION }}"
          SMTP_HOST: "${{ vars.SMTP_HOST }}"
          SMTP_USER: "${{ vars.SMTP_USER }}"
          EMAILS_FROM_EMAIL: "${{ vars.EMAILS_FROM_EMAIL }}"
          SMTP_TLS: "${{ vars.SMTP_TLS }}"
          SMTP_SSL: "${{ vars.SMTP_SSL }}"
          SMTP_PORT: "${{ vars.SMTP_PORT }}"
          POSTGRES_SERVER: "${{ vars.POSTGRES_SERVER }}"
          POSTGRES_PORT: "${{ vars.POSTGRES_PORT }}"
          POSTGRES_DB: "${{ vars.POSTGRES_DB }}"
          POSTGRES_USER: "${{ vars.POSTGRES_USER }}"
          POSTGRES_SSL_ENABLED: "${{ vars.POSTGRES_SSL_ENABLED }}"
          REDIS_SERVER: "${{ vars.REDIS_SERVER }}"
          SENTRY_DSN: "${{ vars.SENTRY_DSN }}"
          DOCKER_IMAGE_BACKEND: "${{ vars.DOCKER_IMAGE_BACKEND }}"
          DOCKER_IMAGE_FRONTEND: "${{ vars.DOCKER_IMAGE_FRONTEND }}"
          AWS_DEPLOYMENT_BUCKET: "${{ vars.AWS_DEPLOYMENT_BUCKET }}"
          ECR_REGISTRY_URL: "${{ vars.ECR_REGISTRY_URL }}"
          AWS_REGION: "${{ vars.AWS_REGION }}"
          DOCKER_HOST: "${{ vars.DOCKER_HOST }}"
          DOCKER_TLS_CERTDIR: ${{ vars.DOCKER_TLS_CERTDIR }}
        ---
        apiVersion: v1
        kind: Secret
        metadata:
          name: docker-builder-secrets
        type: Opaque
        stringData:
          SECRET_KEY: "${{ secrets.SECRET_KEY }}"
          FIRST_SUPERUSER_PASSWORD: "${{ secrets.FIRST_SUPERUSER_PASSWORD }}"
          SMTP_PASSWORD: "${{ secrets.SMTP_PASSWORD }}"
          POSTGRES_PASSWORD: "${{ secrets.POSTGRES_PASSWORD }}"
        EOF
    - name: Deploy to Kubernetes Knative
      run: |
        kubectl apply -f infra/k8s/knative/deployment-workflow/docker-builder-configmap.yaml
        kubectl apply -f infra/k8s/knative/deployment-workflow/dind-deployment.yaml
