prometheus-operator-crds:
  enabled: true
  crds:
    alertmanagerconfigs:
      enabled: true
    alertmanagers:
      enabled: true
    podmonitors:
      enabled: true
    probes:
      enabled: true
    prometheusagents:
      enabled: true
    prometheuses:
      enabled: true
    prometheusrules:
      enabled: true
    scrapeconfigs:
      enabled: true
    servicemonitors:
      enabled: true
    thanosrulers:
      enabled: true

# Prometheus
prometheus:
  rbac:
    create: true

  podSecurityPolicy:
    enabled: true

  serviceAccounts:
    server:
      create: true
  
  ## Monitors ConfigMap changes and POSTs to a URL
  ## Ref: https://github.com/jimmidyson/configmap-reload
  ##
  configmapReload:
    prometheus:
      enabled: true

  alertmanager:
    enabled: false

  kube-state-metrics:
    enabled: false

  prometheus-node-exporter:
    enabled: false

  server:
    ## Prometheus server container name
    ##
    fullnameOverride: prometheus-server
    enabled: true

    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0

    name: server

    # List of flags to override default parameters, e.g:
    # - --enable-feature=agent
    # - --storage.agent.retention.max-time=30m
    defaultFlagsOverride: []

    extraFlags:
      - web.enable-lifecycle
      - web.enable-admin-api
      # - storage.tsdb.no-lockfile
      - storage.tsdb.wal-compression

    ## Additional Prometheus server Volume mounts
    ##
    ## This can be used to mount dedicated secrets for mongo-atlas exporter or
    ## other pre-prepared integrations.
    # extraVolumeMounts:
    #   - name: mongo-atlas-example-secret-mount
    #     mountPath: /etc/secrets/mongoatlas/example
    #     # subPath: 
    #     readOnly: true
    extraVolumeMounts: []

    ## Additional Prometheus server Volumes
    ##
    ## This can be used to mount dedicated secrets for mongo-atlas exporter or
    ## other pre-prepared integrations.
    # extraVolumes:
    #   - name: mongo-atlas-example-secret-mount
    #     secret:
    #       secretName: mongo-atlas-example
    extraVolumes: []

    extraSecretMounts: []

    ### The data directory used by prometheus to set --storage.tsdb.path
    ### When empty server.persistentVolume.mountPath is used instead
    storagePath: ""

    global:
      ## How frequently to scrape targets by default
      scrape_interval: 15s
      ## How long until a scrape request times out
      scrape_timeout: 15s
      ## How frequently to evaluate rules
      evaluation_interval: 15s

    ## https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_write
    #This is going to be k8s internal until the vpc network is well configured and since this helm chart is currently only deployed in ypodomi
    remoteWrite: []

    readinessProbeInitialDelay: 180
    livenessProbeInitialDelay: 180

    ingress:
      enabled: false

    persistentVolume:
      ## If true, Prometheus server will create/use a Persistent Volume Claim
      ## If false, use emptyDir
      ##
      enabled: false

    ## Annotations to be added to Prometheus server pods
    ##
    podAnnotations: {}
      # iam.amazonaws.com/role: prometheus

    ## Labels to be added to Prometheus server pods
    podLabels:
      app: prometheus
      appMode: default
      appType: monitoring

    ## Use a StatefulSet if replicaCount needs to be greater than 1 (see below)
    replicaCount: 1

    #Review benefits of this
    statefulSet:
      enabled: true
      annotations: {}
      labels:
        app: prometheus
        appMode: default
        appType: monitoring
        podManagementPolicy: OrderedReady
      ## Alertmanager headless service to use for the statefulset
      headless:
        annotations: {}
        labels:
          app: prometheus
          appMode: default
          appType: monitoring
        servicePort: 80
        ## Enable gRPC port on service to allow auto discovery with thanos-querier
        gRPC:
          enabled: false
          servicePort: 10901
          # nodePort: 10901

    ## Prometheus server resource requests and limits
    resources:
      requests:
        cpu: 500m
        memory: 512Mi

    ## Prometheus data retention period
    retention: "48h"

    ## Vertical Pod Autoscaler config
    ## Ref: https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler
    verticalAutoscaler:
      ## If true a VPA object will be created for the controller (either StatefulSet or Deployemnt, based on above configs)
      enabled: false
      # updateMode: "Auto"
      # containerPolicies:
      # - containerName: 'prometheus-server'

    service:
      ## If false, no Service will be created for the Prometheus server
      ##
      enabled: true

      annotations: {}
      labels:
        app: prometheus
        appMode: default
        appType: monitoring

      clusterIP: ""
      ## List of IP addresses at which the Prometheus server service is available
      externalIPs: []
      ## If using a statefulSet (statefulSet.enabled=true), configure the
      ## service to connect to a specific replica to have a consistent view
      ## of the data.
      statefulsetReplica:
        enabled: false
        replica: 0

  prometheus-pushgateway:
    enabled: false

  ## Prometheus server ConfigMap entries
  ##
  serverFiles:    
    ## Records configuration
    ## Ref: https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/
    prometheus.yml:
      rule_files:
        - /etc/config/recording_rules.yml
        - /etc/config/alerting_rules.yml
    
      scrape_configs:
        - job_name: prometheus
          static_configs:
            - targets:
              - localhost:9090

        # Scrape config for API servers.
        - job_name: 'kubernetes-apiservers'
          kubernetes_sd_configs:
            - role: endpoints
          scheme: https 
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          relabel_configs:
            - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
              action: keep
              regex: default;kubernetes;https

        - job_name: 'kubernetes-nodes'
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$1/proxy/metrics

        - job_name: 'kubernetes-nodes-cadvisor'
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor

        - job_name: 'kubernetes-service-endpoints'
          honor_labels: true
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
              action: drop
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              action: replace
              target_label: __address__
              regex: (.+?)(?::\d+)?;(\d+)
              replacement: $1:$2
            - action: labelmap
              regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
            - source_labels: [__meta_kubernetes_service_name]
              action: replace
              target_label: service
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: node

        - job_name: 'kubernetes-service-endpoints-slow'
          honor_labels: true
          scrape_interval: 5m
          scrape_timeout: 30s
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              action: replace
              target_label: __address__
              regex: (.+?)(?::\d+)?;(\d+)
              replacement: $1:$2
            - action: labelmap
              regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
            - source_labels: [__meta_kubernetes_service_name]
              action: replace
              target_label: service
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: node

        - job_name: 'prometheus-pushgateway'
          honor_labels: true
          kubernetes_sd_configs:
            - role: service
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
              action: keep
              regex: pushgateway

        - job_name: 'kubernetes-services'
          honor_labels: true
          metrics_path: /probe
          params:
            module: [http_2xx]
          kubernetes_sd_configs:
            - role: service
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
              action: keep
              regex: true
            - source_labels: [__address__]
              target_label: __param_target
            - target_label: __address__
              replacement: blackbox
            - source_labels: [__param_target]
              target_label: instance
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              target_label: namespace
            - source_labels: [__meta_kubernetes_service_name]
              target_label: service

        - job_name: 'kubernetes-pods'
          honor_labels: true
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
              action: drop
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
              action: replace
              regex: (https?)
              target_label: __scheme__
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
              action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$2]:$1'
              target_label: __address__
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
              action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $2:$1
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: pod
            - source_labels: [__meta_kubernetes_pod_phase]
              regex: Pending|Succeeded|Failed|Completed
              action: drop
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: node

        - job_name: 'kubernetes-pods-slow'
          honor_labels: true
          scrape_interval: 5m
          scrape_timeout: 30s
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
              action: replace
              regex: (https?)
              target_label: __scheme__
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
              action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$2]:$1'
              target_label: __address__
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
              action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $2:$1
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: pod
            - source_labels: [__meta_kubernetes_pod_phase]
              regex: Pending|Succeeded|Failed|Completed
              action: drop
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: node

######################
# Kube State Metrics #
######################
kube-state-metrics:
  enabled: true
  # Default values for kube-state-metrics.
  # image:
  #   repository: registry.k8s.io/kube-state-metrics/kube-state-metrics
  #   tag: v1.9.8 #current is 2.7 this is to be able to use current dashboards

  fullnameOverride: kube-state-metrics

  prometheusScrape: true

  # If set to true, this will deploy kube-state-metrics as a StatefulSet and the data
  # will be automatically sharded across <.Values.replicas> pods using the built-in
  # autodiscovery feature: https://github.com/kubernetes/kube-state-metrics#automated-sharding
  # This is an experimental feature and there are no stability guarantees.
  autosharding:
    enabled: false

  replicas: 1

  # List of additional cli arguments to configure kube-state-metrics
  # for example: --enable-gzip-encoding, --log-file, etc.
  # all the possible args can be found here: https://github.com/kubernetes/kube-state-metrics/blob/master/docs/cli-arguments.md
  # extraArgs:
  #   - "--metric-labels-allowlist=pods=[*],deployments=[*]"

  ## Additional labels to add to all resources
  customLabels:
    app: kube-state-metrics
    appMode: default
    appType: monitoring

  ## set to true to add the release label so scraping of the servicemonitor with kube-prometheus-stack works out of the box
  releaseLabel: false

  hostNetwork: false

  rbac:
    # If true, create & use RBAC resources
    create: true

    # Set to a rolename to use existing role - skipping role creating - but still doing serviceaccount and rolebinding to it, rolename set here.
    # useExistingRole: your-existing-role

    # If set to false - Run without Cluteradmin privs needed - ONLY works if namespace is also set (if useExistingRole is set this name is used as ClusterRole or Role to bind to)
    useClusterRole: true

    # Add permissions for CustomResources' apiGroups in Role/ClusterRole. Should be used in conjunction with Custom Resource State Metrics configuration
    # Example:
    # - apiGroups: ["monitoring.coreos.com"]
    #   resources: ["prometheuses"]
    #   verbs: ["list", "watch"]
    extraRules: []

  serviceAccount:
    # Specifies whether a ServiceAccount should be created, require rbac true
    create: true
    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    #name:
    # Reference to one or more secrets to be used when pulling images
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    imagePullSecrets: []
    # ServiceAccount annotations.
    # Use case: AWS EKS IAM roles for service accounts
    # ref: https://docs.aws.amazon.com/eks/latest/userguide/specify-service-account-role.html
    annotations: {}

  prometheus:
    monitor:
      enabled: true

  ## Specify if a Pod Security Policy for kube-state-metrics must be created
  ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  ##
  podSecurityPolicy:
    enabled: false
    annotations: {}
      ## Specify pod annotations
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
      ##
      # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
      # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
      # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

    additionalVolumes: []

  nodeSelector: {}
  affinity: {}
  tolerations: []
  topologySpreadConstraints: []
  annotations: {}
  podAnnotations: {}
  podDisruptionBudget: {}
  metricAllowlist: []
  metricDenylist: []

  # selectorOverride: 
  #   - argocd.argoproj.io/instance: argocd.argoproj

  metricLabelsAllowlist:
    - deployments=[*]
    - pods=[*]
    - statefulsets=[*]
    - replicasets=[*]
    - persistentvolumes=[*]
    - configmaps=[*]
    # - namespaces=[k8s-label-1,k8s-label-n]
  metricAnnotationsAllowList: []
    # - pods=[k8s-annotation-1,k8s-annotation-n]

  # Available collectors for kube-state-metrics.
  # By default, all available resources are enabled, comment out to disable.
  collectors:
    - certificatesigningrequests
    - configmaps
    - cronjobs
    - daemonsets
    - deployments
    - endpoints
    - horizontalpodautoscalers
    - ingresses
    - jobs
    - leases
    - limitranges
    - mutatingwebhookconfigurations
    - namespaces
    - networkpolicies
    - nodes
    - persistentvolumeclaims
    - persistentvolumes
    - poddisruptionbudgets
    - pods
    - replicasets
    - replicationcontrollers
    - resourcequotas
    - secrets
    - services
    - statefulsets
    - storageclasses
    - validatingwebhookconfigurations
    - volumeattachments
    # - ingressroutes #coustom CRD doesn't work
    # - subjectaccessreviews
    # - tokenreviews
    # - verticalpodautoscalers # not a default resource, see also: https://github.com/kubernetes/kube-state-metrics#enabling-verticalpodautoscalers

  resources:
    limits:
      cpu: 150m
      memory: 120Mi
    requests:
      cpu: 100m
      memory: 60Mi

  # Enable self metrics configuration for service and Service Monitor
  # Default values for telemetry configuration can be overridden
  # If you set telemetryNodePort, you must also set service.type to NodePort
  selfMonitor:
    enabled: false
    # telemetryHost: 0.0.0.0
    # telemetryPort: 8081
    # telemetryNodePort: 0

  # Enable vertical pod autoscaler support for kube-state-metrics
  verticalPodAutoscaler:
    enabled: false
    # List of resources that the vertical pod autoscaler can control. Defaults to cpu and memory
    controlledResources: []

    # Define the max allowed resources for the pod
    maxAllowed: {}
    # cpu: 200m
    # memory: 100Mi
    # Define the min allowed resources for the pod
    minAllowed: {}
    # cpu: 200m
    # memory: 100Mi

    # updatePolicy:
      # Specifies whether recommended updates are applied when a Pod is started and whether recommended updates
      # are applied during the life of a Pod. Possible values are "Off", "Initial", "Recreate", and "Auto".
      # updateMode: Auto

#################
# Node-Exporter #
#################
prometheus-node-exporter:
  enabled: true
  # Default values for prometheus-node-exporter.
  # https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus-node-exporter/values.yaml
  fullnameOverride: node-exporter

  image:
    pullPolicy: IfNotPresent

  service:
    listenOnAllInterfaces: true
    # annotations:
    #   prometheus.io/scrape: "true"
    #   prometheus.io/path: /metrics
    #   prometheus.io/port: "9100"

  resources:
    limits:
      cpu: 200m
      memory: 80Mi
    requests:
      cpu: 100m
      memory: 30Mi
  
  # Expose the service to the host network
  hostNetwork: true

  # Share the host process ID namespace
  hostPID: true

  # Mount the node's root file system (/) at /host/root in the container
  hostRootFsMount:
    enabled: true
    mountPropagation: HostToContainer
  
  rbac:
    ## If true, create & use Pod Security Policy resources
    pspEnabled: false

  # Annotations to be added to node exporter pods
  podAnnotations:
    # Fix for very slow GKE cluster upgrades
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    # prometheus.io/port: '9100'
    # prometheus.io/scrape: 'true'

  # Extra labels to be added to node exporter pods
  podLabels:
    app: node-exporter
    appMode: default
    appType: monitoring

  ## set to true to add the release label so scraping of the servicemonitor with kube-prometheus-stack works out of the box
  releaseLabel: true

  tolerations:
    - effect: NoSchedule
      operator: Exists

  ## Additional container arguments
  ##
  extraArgs: []
  #   - --collector.diskstats.ignored-devices=^(ram|loop|fd|(h|s|v)d[a-z]|nvme\\d+n\\d+p)\\d+$
  #   - --collector.textfile.directory=/run/prometheus
