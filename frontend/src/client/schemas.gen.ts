// This file is auto-generated by @hey-api/openapi-ts

export const AccessTokenSchema = {
  properties: {
    access_token: {
      type: "string",
      title: "Access Token",
    },
    token_type: {
      type: "string",
      title: "Token Type",
    },
  },
  type: "object",
  required: ["access_token", "token_type"],
  title: "AccessToken",
} as const

export const AccessTokenWithUserMeSchema = {
  properties: {
    access_token: {
      type: "string",
      title: "Access Token",
    },
    token_type: {
      type: "string",
      title: "Token Type",
      default: "bearer",
    },
    user: {
      $ref: "#/components/schemas/UserMePublic",
    },
  },
  type: "object",
  required: ["access_token", "user"],
  title: "AccessTokenWithUserMe",
} as const

export const AddUserToTeamSchema = {
  properties: {
    user_id: {
      type: "string",
      format: "uuid",
      title: "User Id",
    },
    role: {
      $ref: "#/components/schemas/Role",
    },
  },
  type: "object",
  required: ["user_id", "role"],
  title: "AddUserToTeam",
} as const

export const AppCreateSchema = {
  properties: {
    name: {
      type: "string",
      maxLength: 255,
      minLength: 1,
      title: "Name",
    },
    team_id: {
      type: "string",
      format: "uuid",
      title: "Team Id",
    },
  },
  type: "object",
  required: ["name", "team_id"],
  title: "AppCreate",
} as const

export const AppPublicSchema = {
  properties: {
    name: {
      type: "string",
      maxLength: 255,
      minLength: 1,
      title: "Name",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    team_id: {
      type: "string",
      format: "uuid",
      title: "Team Id",
    },
    slug: {
      type: "string",
      title: "Slug",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
    url: {
      type: "string",
      title: "Url",
    },
    is_fresh: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Fresh",
    },
    latest_deployment: {
      anyOf: [
        {
          $ref: "#/components/schemas/DeploymentPublic",
        },
        {
          type: "null",
        },
      ],
    },
  },
  type: "object",
  required: [
    "name",
    "id",
    "team_id",
    "slug",
    "created_at",
    "updated_at",
    "url",
    "is_fresh",
    "latest_deployment",
  ],
  title: "AppPublic",
} as const

export const AppsPublicSchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/AppPublic",
      },
      type: "array",
      title: "Data",
    },
    count: {
      type: "integer",
      title: "Count",
    },
  },
  type: "object",
  required: ["data", "count"],
  title: "AppsPublic",
} as const

export const AuthorizeDeviceInSchema = {
  properties: {
    user_code: {
      type: "string",
      title: "User Code",
    },
  },
  type: "object",
  required: ["user_code"],
  title: "AuthorizeDeviceIn",
} as const

export const Body_login_device_authorizationSchema = {
  properties: {
    client_id: {
      type: "string",
      title: "Client Id",
    },
  },
  type: "object",
  required: ["client_id"],
  title: "Body_login-device_authorization",
} as const

export const Body_login_login_access_tokenSchema = {
  properties: {
    grant_type: {
      anyOf: [
        {
          type: "string",
          pattern: "^password$",
        },
        {
          type: "null",
        },
      ],
      title: "Grant Type",
    },
    username: {
      type: "string",
      title: "Username",
    },
    password: {
      type: "string",
      format: "password",
      title: "Password",
    },
    scope: {
      type: "string",
      title: "Scope",
      default: "",
    },
    client_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Client Id",
    },
    client_secret: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      format: "password",
      title: "Client Secret",
    },
  },
  type: "object",
  required: ["username", "password"],
  title: "Body_login-login_access_token",
} as const

export const Body_login_login_tokenSchema = {
  properties: {
    client_id: {
      type: "string",
      title: "Client Id",
    },
    device_code: {
      type: "string",
      title: "Device Code",
    },
    grant_type: {
      type: "string",
      const: "urn:ietf:params:oauth:grant-type:device_code",
      title: "Grant Type",
    },
  },
  type: "object",
  required: ["client_id", "device_code", "grant_type"],
  title: "Body_login-login_token",
} as const

export const CreateAppSchema = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    team_id: {
      type: "string",
      format: "uuid",
      title: "Team Id",
    },
  },
  type: "object",
  required: ["name", "team_id"],
  title: "CreateApp",
} as const

export const CreateDeploymentSchema = {
  properties: {
    app_id: {
      type: "string",
      format: "uuid",
      title: "App Id",
    },
    status: {
      anyOf: [
        {
          $ref: "#/components/schemas/DeploymentStatus",
        },
        {
          type: "null",
        },
      ],
    },
  },
  type: "object",
  required: ["app_id"],
  title: "CreateDeployment",
} as const

export const CreateEnvironmentVariableSchema = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    value: {
      type: "string",
      title: "Value",
    },
    app_id: {
      type: "string",
      format: "uuid",
      title: "App Id",
    },
  },
  type: "object",
  required: ["name", "value", "app_id"],
  title: "CreateEnvironmentVariable",
} as const

export const CreateTeamSchema = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    owner_id: {
      type: "string",
      format: "uuid",
      title: "Owner Id",
    },
    is_personal_team: {
      type: "boolean",
      title: "Is Personal Team",
      default: false,
    },
  },
  type: "object",
  required: ["name", "owner_id"],
  title: "CreateTeam",
} as const

export const CreateUserSchema = {
  properties: {
    email: {
      type: "string",
      title: "Email",
    },
    password: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Password",
    },
    full_name: {
      type: "string",
      title: "Full Name",
    },
    is_verified: {
      type: "boolean",
      title: "Is Verified",
      default: false,
    },
  },
  type: "object",
  required: ["email", "full_name"],
  title: "CreateUser",
} as const

export const DeploymentPublicSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    app_id: {
      type: "string",
      format: "uuid",
      title: "App Id",
    },
    slug: {
      type: "string",
      title: "Slug",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
    status: {
      $ref: "#/components/schemas/DeploymentStatus",
    },
    url: {
      type: "string",
      title: "Url",
    },
    dashboard_url: {
      type: "string",
      title: "Dashboard Url",
    },
  },
  type: "object",
  required: [
    "id",
    "app_id",
    "slug",
    "created_at",
    "updated_at",
    "status",
    "url",
    "dashboard_url",
  ],
  title: "DeploymentPublic",
} as const

export const DeploymentStatusSchema = {
  type: "string",
  enum: [
    "waiting_upload",
    "ready_for_build",
    "building",
    "extracting",
    "building_image",
    "deploying",
    "success",
    "failed",
  ],
  title: "DeploymentStatus",
} as const

export const DeploymentUploadOutSchema = {
  properties: {
    url: {
      type: "string",
      title: "Url",
    },
    fields: {
      additionalProperties: true,
      type: "object",
      title: "Fields",
    },
  },
  type: "object",
  required: ["url", "fields"],
  title: "DeploymentUploadOut",
} as const

export const DeploymentsPublicSchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/DeploymentPublic",
      },
      type: "array",
      title: "Data",
    },
    count: {
      type: "integer",
      title: "Count",
    },
  },
  type: "object",
  required: ["data", "count"],
  title: "DeploymentsPublic",
} as const

export const DeviceAuthorizationInfoSchema = {
  properties: {
    device_code: {
      type: "string",
      title: "Device Code",
    },
    created_at: {
      type: "string",
      title: "Created At",
    },
    request_ip: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Request Ip",
    },
  },
  type: "object",
  required: ["device_code", "created_at", "request_ip"],
  title: "DeviceAuthorizationInfo",
} as const

export const DeviceAuthorizationResponseSchema = {
  properties: {
    device_code: {
      type: "string",
      title: "Device Code",
    },
    user_code: {
      type: "string",
      title: "User Code",
    },
    verification_uri: {
      type: "string",
      title: "Verification Uri",
    },
    verification_uri_complete: {
      type: "string",
      title: "Verification Uri Complete",
    },
    expires_in: {
      type: "integer",
      title: "Expires In",
    },
    interval: {
      type: "integer",
      title: "Interval",
    },
  },
  type: "object",
  required: [
    "device_code",
    "user_code",
    "verification_uri",
    "verification_uri_complete",
    "expires_in",
    "interval",
  ],
  title: "DeviceAuthorizationResponse",
} as const

export const EmailVerificationTokenSchema = {
  properties: {
    token: {
      type: "string",
      title: "Token",
    },
  },
  type: "object",
  required: ["token"],
  title: "EmailVerificationToken",
} as const

export const EnvironmentVariableSchema = {
  properties: {
    app_id: {
      type: "string",
      format: "uuid",
      title: "App Id",
    },
    name: {
      type: "string",
      maxLength: 255,
      title: "Name",
    },
    value: {
      type: "string",
      minLength: 1,
      title: "Value",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
  },
  type: "object",
  required: ["app_id", "name", "value"],
  title: "EnvironmentVariable",
} as const

export const EnvironmentVariableCreateSchema = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    value: {
      type: "string",
      title: "Value",
    },
  },
  type: "object",
  required: ["name", "value"],
  title: "EnvironmentVariableCreate",
} as const

export const EnvironmentVariablePublicSchema = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    value: {
      type: "string",
      title: "Value",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
  },
  type: "object",
  required: ["name", "value", "created_at", "updated_at"],
  title: "EnvironmentVariablePublic",
} as const

export const EnvironmentVariableUpdateSchema = {
  properties: {
    value: {
      type: "string",
      title: "Value",
    },
  },
  type: "object",
  required: ["value"],
  title: "EnvironmentVariableUpdate",
} as const

export const EnvironmentVariablesPublicSchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/EnvironmentVariablePublic",
      },
      type: "array",
      title: "Data",
    },
    count: {
      type: "integer",
      title: "Count",
    },
  },
  type: "object",
  required: ["data", "count"],
  title: "EnvironmentVariablesPublic",
} as const

export const GenerateAccessTokenSchema = {
  properties: {
    user_id: {
      type: "string",
      format: "uuid",
      title: "User Id",
    },
  },
  type: "object",
  required: ["user_id"],
  title: "GenerateAccessToken",
} as const

export const GitHubAccountSchema = {
  properties: {
    provider_user_id: {
      type: "string",
      title: "Provider User Id",
    },
    provider_username: {
      type: "string",
      title: "Provider Username",
    },
  },
  type: "object",
  required: ["provider_user_id", "provider_username"],
  title: "GitHubAccount",
} as const

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: "#/components/schemas/ValidationError",
      },
      type: "array",
      title: "Detail",
    },
  },
  type: "object",
  title: "HTTPValidationError",
} as const

export const HealthCheckResponseSchema = {
  properties: {
    redis: {
      type: "boolean",
      title: "Redis",
    },
  },
  type: "object",
  required: ["redis"],
  title: "HealthCheckResponse",
} as const

export const InvitationCreateSchema = {
  properties: {
    role: {
      $ref: "#/components/schemas/Role",
      maxLength: 255,
    },
    email: {
      type: "string",
      maxLength: 255,
      format: "email",
      title: "Email",
    },
    team_id: {
      type: "string",
      format: "uuid",
      title: "Team Id",
    },
  },
  type: "object",
  required: ["role", "email", "team_id"],
  title: "InvitationCreate",
} as const

export const InvitationPublicSchema = {
  properties: {
    role: {
      $ref: "#/components/schemas/Role",
      maxLength: 255,
    },
    email: {
      type: "string",
      maxLength: 255,
      format: "email",
      title: "Email",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    team_id: {
      type: "string",
      format: "uuid",
      title: "Team Id",
    },
    invited_by_id: {
      type: "string",
      format: "uuid",
      title: "Invited By Id",
    },
    status: {
      $ref: "#/components/schemas/InvitationStatus",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    sender: {
      $ref: "#/components/schemas/UserPublic",
    },
    team: {
      $ref: "#/components/schemas/TeamPublic",
    },
  },
  type: "object",
  required: [
    "role",
    "email",
    "id",
    "team_id",
    "invited_by_id",
    "status",
    "created_at",
    "sender",
    "team",
  ],
  title: "InvitationPublic",
} as const

export const InvitationStatusSchema = {
  type: "string",
  enum: ["pending", "accepted"],
  title: "InvitationStatus",
} as const

export const InvitationTokenSchema = {
  properties: {
    token: {
      type: "string",
      title: "Token",
    },
  },
  type: "object",
  required: ["token"],
  title: "InvitationToken",
} as const

export const InvitationsPublicSchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/InvitationPublic",
      },
      type: "array",
      title: "Data",
    },
    count: {
      type: "integer",
      title: "Count",
    },
  },
  type: "object",
  required: ["data", "count"],
  title: "InvitationsPublic",
} as const

export const LogSchema = {
  properties: {
    team: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Team",
    },
    app: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "App",
    },
    deployment: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Deployment",
    },
    timestamp: {
      type: "string",
      format: "date-time",
      title: "Timestamp",
    },
    message: {
      type: "string",
      title: "Message",
    },
  },
  type: "object",
  required: ["timestamp", "message"],
  title: "Log",
} as const

export const LogsResponseSchema = {
  properties: {
    logs: {
      items: {
        $ref: "#/components/schemas/Log",
      },
      type: "array",
      title: "Logs",
    },
  },
  type: "object",
  required: ["logs"],
  title: "LogsResponse",
} as const

export const MessageSchema = {
  properties: {
    message: {
      type: "string",
      title: "Message",
    },
  },
  type: "object",
  required: ["message"],
  title: "Message",
} as const

export const NewPasswordSchema = {
  properties: {
    token: {
      type: "string",
      title: "Token",
    },
    new_password: {
      type: "string",
      minLength: 8,
      title: "New Password",
    },
  },
  type: "object",
  required: ["token", "new_password"],
  title: "NewPassword",
} as const

export const ResendEmailVerificationSchema = {
  properties: {
    email: {
      type: "string",
      format: "email",
      title: "Email",
    },
  },
  type: "object",
  required: ["email"],
  title: "ResendEmailVerification",
} as const

export const RoleSchema = {
  type: "string",
  enum: ["member", "admin"],
  title: "Role",
} as const

export const TeamCreateSchema = {
  properties: {
    name: {
      type: "string",
      maxLength: 255,
      minLength: 3,
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
  },
  type: "object",
  required: ["name"],
  title: "TeamCreate",
} as const

export const TeamPublicSchema = {
  properties: {
    name: {
      type: "string",
      maxLength: 255,
      minLength: 3,
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    slug: {
      type: "string",
      maxLength: 255,
      title: "Slug",
    },
    is_personal_team: {
      type: "boolean",
      title: "Is Personal Team",
    },
    owner_id: {
      type: "string",
      format: "uuid",
      title: "Owner Id",
    },
  },
  type: "object",
  required: ["name", "id", "slug", "is_personal_team", "owner_id"],
  title: "TeamPublic",
} as const

export const TeamUpdateSchema = {
  properties: {
    name: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
          minLength: 3,
        },
        {
          type: "null",
        },
      ],
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
  },
  type: "object",
  title: "TeamUpdate",
} as const

export const TeamUpdateMemberSchema = {
  properties: {
    role: {
      $ref: "#/components/schemas/Role",
    },
  },
  type: "object",
  required: ["role"],
  title: "TeamUpdateMember",
} as const

export const TeamWithUserPublicSchema = {
  properties: {
    name: {
      type: "string",
      maxLength: 255,
      minLength: 3,
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    slug: {
      type: "string",
      maxLength: 255,
      title: "Slug",
    },
    is_personal_team: {
      type: "boolean",
      title: "Is Personal Team",
    },
    owner_id: {
      type: "string",
      format: "uuid",
      title: "Owner Id",
    },
    user_links: {
      items: {
        $ref: "#/components/schemas/UserLinkPublic",
      },
      type: "array",
      title: "User Links",
    },
  },
  type: "object",
  required: [
    "name",
    "id",
    "slug",
    "is_personal_team",
    "owner_id",
    "user_links",
  ],
  title: "TeamWithUserPublic",
} as const

export const TeamsPublicSchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/TeamPublic",
      },
      type: "array",
      title: "Data",
    },
    count: {
      type: "integer",
      title: "Count",
    },
  },
  type: "object",
  required: ["data", "count"],
  title: "TeamsPublic",
} as const

export const TokenSchema = {
  properties: {
    access_token: {
      type: "string",
      title: "Access Token",
    },
    token_type: {
      type: "string",
      title: "Token Type",
      default: "bearer",
    },
  },
  type: "object",
  required: ["access_token"],
  title: "Token",
} as const

export const TokenResponseSchema = {
  properties: {
    token_type: {
      description: "The type of token, usually 'Bearer'",
      title: "Token Type",
      type: "string",
    },
    access_token: {
      description: "The issued access token",
      title: "Access Token",
      type: "string",
    },
    expires_in: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      default: null,
      description: "Lifetime of the access token in seconds",
      title: "Expires In",
    },
    refresh_token: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      default: null,
      description: "Token used to obtain new access tokens",
      title: "Refresh Token",
    },
    refresh_token_expires_in: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      default: null,
      description: "Lifetime of the refresh token in seconds",
      title: "Refresh Token Expires In",
    },
    scope: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      default: null,
      description:
        "Space-delimited list of scopes associated with the access token",
      title: "Scope",
    },
  },
  required: ["token_type", "access_token"],
  title: "TokenResponse",
  type: "object",
} as const

export const TransferTeamOwnershipSchema = {
  properties: {
    user_id: {
      type: "string",
      format: "uuid",
      title: "User Id",
    },
  },
  type: "object",
  required: ["user_id"],
  title: "TransferTeamOwnership",
} as const

export const UpdatePasswordSchema = {
  properties: {
    current_password: {
      anyOf: [
        {
          type: "string",
          minLength: 8,
        },
        {
          type: "null",
        },
      ],
      title: "Current Password",
    },
    new_password: {
      type: "string",
      minLength: 8,
      title: "New Password",
    },
  },
  type: "object",
  required: ["new_password"],
  title: "UpdatePassword",
} as const

export const UserLinkPublicSchema = {
  properties: {
    role: {
      $ref: "#/components/schemas/Role",
    },
    user: {
      $ref: "#/components/schemas/UserPublic",
    },
  },
  type: "object",
  required: ["role", "user"],
  title: "UserLinkPublic",
} as const

export const UserMePublicSchema = {
  properties: {
    email: {
      type: "string",
      maxLength: 255,
      format: "email",
      title: "Email",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      default: true,
    },
    full_name: {
      type: "string",
      maxLength: 255,
      minLength: 3,
      title: "Full Name",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    personal_team_slug: {
      type: "string",
      title: "Personal Team Slug",
    },
    github_account: {
      anyOf: [
        {
          $ref: "#/components/schemas/GitHubAccount",
        },
        {
          type: "null",
        },
      ],
    },
    has_usable_password: {
      type: "boolean",
      title: "Has Usable Password",
    },
  },
  type: "object",
  required: [
    "email",
    "full_name",
    "id",
    "personal_team_slug",
    "github_account",
    "has_usable_password",
  ],
  title: "UserMePublic",
} as const

export const UserPublicSchema = {
  properties: {
    email: {
      type: "string",
      maxLength: 255,
      format: "email",
      title: "Email",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      default: true,
    },
    full_name: {
      type: "string",
      maxLength: 255,
      minLength: 3,
      title: "Full Name",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
  },
  type: "object",
  required: ["email", "full_name", "id"],
  title: "UserPublic",
} as const

export const UserRegisterSchema = {
  properties: {
    email: {
      type: "string",
      maxLength: 255,
      format: "email",
      title: "Email",
    },
    password: {
      type: "string",
      minLength: 8,
      title: "Password",
    },
    full_name: {
      type: "string",
      maxLength: 255,
      minLength: 3,
      title: "Full Name",
    },
  },
  type: "object",
  required: ["email", "password", "full_name"],
  title: "UserRegister",
} as const

export const UserTeamLinkPublicSchema = {
  properties: {
    user: {
      $ref: "#/components/schemas/UserPublic",
    },
    team: {
      $ref: "#/components/schemas/TeamPublic",
    },
    role: {
      $ref: "#/components/schemas/Role",
    },
  },
  type: "object",
  required: ["user", "team", "role"],
  title: "UserTeamLinkPublic",
} as const

export const UserUpdateEmailMeSchema = {
  properties: {
    email: {
      type: "string",
      maxLength: 255,
      format: "email",
      title: "Email",
    },
  },
  type: "object",
  required: ["email"],
  title: "UserUpdateEmailMe",
} as const

export const UserUpdateMeSchema = {
  properties: {
    full_name: {
      type: "string",
      maxLength: 255,
      minLength: 3,
      title: "Full Name",
    },
  },
  type: "object",
  required: ["full_name"],
  title: "UserUpdateMe",
} as const

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "integer",
          },
        ],
      },
      type: "array",
      title: "Location",
    },
    msg: {
      type: "string",
      title: "Message",
    },
    type: {
      type: "string",
      title: "Error Type",
    },
  },
  type: "object",
  required: ["loc", "msg", "type"],
  title: "ValidationError",
} as const

export const WaitingListUserCreateSchema = {
  properties: {
    email: {
      type: "string",
      maxLength: 255,
      format: "email",
      title: "Email",
    },
    name: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Name",
    },
    organization: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Organization",
    },
    role: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Role",
    },
    team_size: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Team Size",
    },
    location: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Location",
    },
    use_case: {
      anyOf: [
        {
          type: "string",
          maxLength: 10000,
        },
        {
          type: "null",
        },
      ],
      title: "Use Case",
    },
    secret_code: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Secret Code",
    },
  },
  type: "object",
  required: ["email"],
  title: "WaitingListUserCreate",
} as const

export const AuthorizationCodeGrantRequestSchema = {
  properties: {
    grant_type: {
      const: "authorization_code",
      description: "The OAuth 2.0 grant type",
      title: "Grant Type",
      type: "string",
    },
    client_id: {
      description: "The client identifier",
      title: "Client Id",
      type: "string",
    },
    client_secret: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      default: null,
      description: "The client secret (for confidential clients)",
      title: "Client Secret",
    },
    code: {
      description:
        "The authorization code received from the authorization server",
      title: "Code",
      type: "string",
    },
    redirect_uri: {
      description: "The redirect URI used in the authorization request",
      title: "Redirect Uri",
      type: "string",
    },
    code_verifier: {
      description: "The PKCE code verifier",
      title: "Code Verifier",
      type: "string",
    },
    scope: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      default: null,
      description: "Space-delimited list of scopes",
      title: "Scope",
    },
  },
  required: [
    "grant_type",
    "client_id",
    "code",
    "redirect_uri",
    "code_verifier",
  ],
  title: "AuthorizationCodeGrantRequest",
  type: "object",
} as const

export const PasswordGrantRequestSchema = {
  properties: {
    grant_type: {
      const: "password",
      description: "The OAuth 2.0 grant type",
      title: "Grant Type",
      type: "string",
    },
    client_id: {
      description: "The client identifier",
      title: "Client Id",
      type: "string",
    },
    client_secret: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      default: null,
      description: "The client secret (for confidential clients)",
      title: "Client Secret",
    },
    username: {
      description: "The resource owner username",
      title: "Username",
      type: "string",
    },
    password: {
      description: "The resource owner password",
      title: "Password",
      type: "string",
    },
    scope: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      default: null,
      description: "Space-delimited list of scopes",
      title: "Scope",
    },
  },
  required: ["grant_type", "client_id", "username", "password"],
  title: "PasswordGrantRequest",
  type: "object",
} as const

export const TokenErrorResponseSchema = {
  properties: {
    error: {
      description: "Error code as per OAuth 2.0 specification",
      enum: [
        "invalid_request",
        "invalid_client",
        "invalid_grant",
        "unauthorized_client",
        "unsupported_grant_type",
        "invalid_scope",
      ],
      title: "Error",
      type: "string",
    },
    error_description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      default: null,
      description: "Human-readable explanation of the error",
      title: "Error Description",
    },
    error_uri: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      default: null,
      description: "URI to a web page with more information about the error",
      title: "Error Uri",
    },
  },
  required: ["error"],
  title: "TokenErrorResponse",
  type: "object",
} as const
