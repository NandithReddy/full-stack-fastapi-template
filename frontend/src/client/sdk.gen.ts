// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  AppsCreateAppData,
  AppsCreateAppResponse,
  AppsCreateEnvironmentVariableData,
  AppsCreateEnvironmentVariableResponse,
  AppsDeleteAppData,
  AppsDeleteAppResponse,
  AppsDeleteEnvironmentVariableData,
  AppsDeleteEnvironmentVariableResponse,
  AppsReadAppData,
  AppsReadAppLogsData,
  AppsReadAppLogsResponse,
  AppsReadAppResponse,
  AppsReadAppsData,
  AppsReadAppsResponse,
  AppsReadEnvironmentVariablesData,
  AppsReadEnvironmentVariablesResponse,
  AppsUpdateEnvironmentVariableData,
  AppsUpdateEnvironmentVariableResponse,
  AppsUpdateEnvironmentVariablesData,
  AppsUpdateEnvironmentVariablesResponse,
  DeploymentsCreateDeploymentData,
  DeploymentsCreateDeploymentResponse,
  DeploymentsGetBuildLogsData,
  DeploymentsGetBuildLogsResponse,
  DeploymentsReadDeploymentData,
  DeploymentsReadDeploymentLogsData,
  DeploymentsReadDeploymentLogsResponse,
  DeploymentsReadDeploymentResponse,
  DeploymentsReadDeploymentsData,
  DeploymentsReadDeploymentsResponse,
  DeploymentsRedeployDeploymentData,
  DeploymentsRedeployDeploymentResponse,
  DeploymentsUploadCompleteData,
  DeploymentsUploadCompleteResponse,
  DeploymentsUploadDeploymentArtifactData,
  DeploymentsUploadDeploymentArtifactResponse,
  GithubAuthorizeResponse,
  GithubCallbackResponse,
  InvitationsAcceptInvitationData,
  InvitationsAcceptInvitationResponse,
  InvitationsCreateInvitationData,
  InvitationsCreateInvitationResponse,
  InvitationsDeleteInvitationData,
  InvitationsDeleteInvitationResponse,
  InvitationsReadInvitationsMeData,
  InvitationsReadInvitationsMeResponse,
  InvitationsReadInvitationsSentData,
  InvitationsReadInvitationsSentResponse,
  InvitationsReadInvitationsTeamByAdminData,
  InvitationsReadInvitationsTeamByAdminResponse,
  InvitationsVerifyInvitationData,
  InvitationsVerifyInvitationResponse,
  LoginAuthorizeDeviceData,
  LoginAuthorizeDeviceResponse,
  LoginDeviceAuthorizationData,
  LoginDeviceAuthorizationInfoData,
  LoginDeviceAuthorizationInfoResponse,
  LoginDeviceAuthorizationResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginLoginTokenData,
  LoginLoginTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginTestTokenResponse,
  PrivateAddUserToTeamData,
  PrivateAddUserToTeamResponse,
  PrivateCreateAppData,
  PrivateCreateAppResponse,
  PrivateCreateDeploymentData,
  PrivateCreateDeploymentResponse,
  PrivateCreateEnvironmentVariableData,
  PrivateCreateEnvironmentVariableResponse,
  PrivateCreateTeamData,
  PrivateCreateTeamResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  TeamsCreateTeamData,
  TeamsCreateTeamResponse,
  TeamsDeleteTeamData,
  TeamsDeleteTeamResponse,
  TeamsReadTeamData,
  TeamsReadTeamResponse,
  TeamsReadTeamsData,
  TeamsReadTeamsResponse,
  TeamsRemoveMemberFromTeamData,
  TeamsRemoveMemberFromTeamResponse,
  TeamsTransferTeamData,
  TeamsTransferTeamResponse,
  TeamsUpdateMemberInTeamData,
  TeamsUpdateMemberInTeamResponse,
  TeamsUpdateTeamData,
  TeamsUpdateTeamResponse,
  TeamsValidateTeamNameData,
  TeamsValidateTeamNameResponse,
  TokenResponse2,
  UsersAddToWaitingListData,
  UsersAddToWaitingListResponse,
  UsersDeleteUserMeResponse,
  UsersReadUserMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersRequestEmailUpdateData,
  UsersRequestEmailUpdateResponse,
  UsersResendVerificationEmailData,
  UsersResendVerificationEmailResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersVerifyEmailTokenData,
  UsersVerifyEmailTokenResponse,
  UsersVerifyUpdateEmailTokenData,
  UsersVerifyUpdateEmailTokenResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class AppsService {
  /**
   * Read Environment Variables
   * Retrieve a list of environment variables for the provided app.
   * @param data The data for the request.
   * @param data.appId
   * @returns EnvironmentVariablesPublic Successful Response
   * @throws ApiError
   */
  public static readEnvironmentVariables(
    data: AppsReadEnvironmentVariablesData,
  ): CancelablePromise<AppsReadEnvironmentVariablesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/apps/{app_id}/environment-variables/",
      path: {
        app_id: data.appId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Environment Variable
   * Create a new environment variable for the provided app.
   * @param data The data for the request.
   * @param data.appId
   * @param data.requestBody
   * @returns EnvironmentVariablePublic Successful Response
   * @throws ApiError
   */
  public static createEnvironmentVariable(
    data: AppsCreateEnvironmentVariableData,
  ): CancelablePromise<AppsCreateEnvironmentVariableResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/apps/{app_id}/environment-variables/",
      path: {
        app_id: data.appId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Environment Variables
   * Update the provided environment variables.
   * @param data The data for the request.
   * @param data.appId
   * @param data.requestBody
   * @returns EnvironmentVariablesPublic Successful Response
   * @throws ApiError
   */
  public static updateEnvironmentVariables(
    data: AppsUpdateEnvironmentVariablesData,
  ): CancelablePromise<AppsUpdateEnvironmentVariablesResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/apps/{app_id}/environment-variables/",
      path: {
        app_id: data.appId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Environment Variable
   * Delete the provided environment variable.
   * @param data The data for the request.
   * @param data.appId
   * @param data.environmentVariableName
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteEnvironmentVariable(
    data: AppsDeleteEnvironmentVariableData,
  ): CancelablePromise<AppsDeleteEnvironmentVariableResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/apps/{app_id}/environment-variables/{environment_variable_name}",
      path: {
        app_id: data.appId,
        environment_variable_name: data.environmentVariableName,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Environment Variable
   * Update the provided environment variable.
   * @param data The data for the request.
   * @param data.appId
   * @param data.environmentVariableName
   * @param data.requestBody
   * @returns EnvironmentVariablePublic Successful Response
   * @throws ApiError
   */
  public static updateEnvironmentVariable(
    data: AppsUpdateEnvironmentVariableData,
  ): CancelablePromise<AppsUpdateEnvironmentVariableResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/apps/{app_id}/environment-variables/{environment_variable_name}",
      path: {
        app_id: data.appId,
        environment_variable_name: data.environmentVariableName,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Apps
   * Retrieve a list of apps for the provided team.
   * @param data The data for the request.
   * @param data.teamId
   * @param data.skip
   * @param data.limit
   * @param data.slug
   * @param data.orderBy
   * @param data.order
   * @returns AppsPublic Successful Response
   * @throws ApiError
   */
  public static readApps(
    data: AppsReadAppsData,
  ): CancelablePromise<AppsReadAppsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/apps/",
      query: {
        team_id: data.teamId,
        skip: data.skip,
        limit: data.limit,
        slug: data.slug,
        order_by: data.orderBy,
        order: data.order,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create App
   * Create a new app with the provided details.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AppPublic Successful Response
   * @throws ApiError
   */
  public static createApp(
    data: AppsCreateAppData,
  ): CancelablePromise<AppsCreateAppResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/apps/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read App
   * Retrieve the details of the provided app.
   * @param data The data for the request.
   * @param data.appId
   * @returns AppPublic Successful Response
   * @throws ApiError
   */
  public static readApp(
    data: AppsReadAppData,
  ): CancelablePromise<AppsReadAppResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/apps/{app_id}",
      path: {
        app_id: data.appId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete App
   * Delete the provided app.
   * @param data The data for the request.
   * @param data.appId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteApp(
    data: AppsDeleteAppData,
  ): CancelablePromise<AppsDeleteAppResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/apps/{app_id}",
      path: {
        app_id: data.appId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read App Logs
   * Fetch last logs for an app.
   * @param data The data for the request.
   * @param data.appId
   * @returns LogsResponse Successful Response
   * @throws ApiError
   */
  public static readAppLogs(
    data: AppsReadAppLogsData,
  ): CancelablePromise<AppsReadAppLogsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/apps/{app_id}/logs",
      path: {
        app_id: data.appId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class AuthService {
  /**
   * Wrapper
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static githubAuthorize(): CancelablePromise<GithubAuthorizeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/github/authorize",
    })
  }

  /**
   * Wrapper
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static githubCallback(): CancelablePromise<GithubCallbackResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/github/callback",
    })
  }

  /**
   * Wrapper
   * @returns TokenResponse Successful Response
   * @throws ApiError
   */
  public static token(): CancelablePromise<TokenResponse2> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/token",
    })
  }
}

export class DeploymentsService {
  /**
   * Read Deployments
   * Retrieve a list of deployments for the provided app.
   * @param data The data for the request.
   * @param data.appId
   * @param data.skip
   * @param data.limit
   * @param data.orderBy
   * @param data.order
   * @returns DeploymentsPublic Successful Response
   * @throws ApiError
   */
  public static readDeployments(
    data: DeploymentsReadDeploymentsData,
  ): CancelablePromise<DeploymentsReadDeploymentsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/apps/{app_id}/deployments/",
      path: {
        app_id: data.appId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
        order_by: data.orderBy,
        order: data.order,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Deployment
   * Create a new deployment.
   * @param data The data for the request.
   * @param data.appId
   * @returns DeploymentPublic Successful Response
   * @throws ApiError
   */
  public static createDeployment(
    data: DeploymentsCreateDeploymentData,
  ): CancelablePromise<DeploymentsCreateDeploymentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/apps/{app_id}/deployments/",
      path: {
        app_id: data.appId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Deployment
   * Retrieve a list of deployments for the provided app.
   * @param data The data for the request.
   * @param data.appId
   * @param data.deploymentId
   * @returns DeploymentPublic Successful Response
   * @throws ApiError
   */
  public static readDeployment(
    data: DeploymentsReadDeploymentData,
  ): CancelablePromise<DeploymentsReadDeploymentResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/apps/{app_id}/deployments/{deployment_id}",
      path: {
        app_id: data.appId,
        deployment_id: data.deploymentId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Deployment Logs
   * Get the logs for a deployment.
   * @param data The data for the request.
   * @param data.deploymentId
   * @returns LogsResponse Successful Response
   * @throws ApiError
   */
  public static readDeploymentLogs(
    data: DeploymentsReadDeploymentLogsData,
  ): CancelablePromise<DeploymentsReadDeploymentLogsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/deployments/{deployment_id}/logs",
      path: {
        deployment_id: data.deploymentId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Upload Deployment Artifact
   * Upload a new deployment artifact.
   * @param data The data for the request.
   * @param data.deploymentId
   * @returns DeploymentUploadOut Successful Response
   * @throws ApiError
   */
  public static uploadDeploymentArtifact(
    data: DeploymentsUploadDeploymentArtifactData,
  ): CancelablePromise<DeploymentsUploadDeploymentArtifactResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/deployments/{deployment_id}/upload",
      path: {
        deployment_id: data.deploymentId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Redeploy Deployment
   * Send to builder to redeploy the deployment.
   * @param data The data for the request.
   * @param data.deploymentId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static redeployDeployment(
    data: DeploymentsRedeployDeploymentData,
  ): CancelablePromise<DeploymentsRedeployDeploymentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/deployments/{deployment_id}/redeploy",
      path: {
        deployment_id: data.deploymentId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Upload Complete
   * Notify the builder backend that the deployment artifact has been uploaded.
   * @param data The data for the request.
   * @param data.deploymentId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static uploadComplete(
    data: DeploymentsUploadCompleteData,
  ): CancelablePromise<DeploymentsUploadCompleteResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/deployments/{deployment_id}/upload-complete",
      path: {
        deployment_id: data.deploymentId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Build Logs
   * @param data The data for the request.
   * @param data.deploymentId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getBuildLogs(
    data: DeploymentsGetBuildLogsData,
  ): CancelablePromise<DeploymentsGetBuildLogsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/deployments/{deployment_id}/build-logs",
      path: {
        deployment_id: data.deploymentId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class InvitationsService {
  /**
   * Read Invitations Me
   * Retrieve a list of invitations accessible to the current user.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns InvitationsPublic Successful Response
   * @throws ApiError
   */
  public static readInvitationsMe(
    data: InvitationsReadInvitationsMeData = {},
  ): CancelablePromise<InvitationsReadInvitationsMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/invitations/me",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Invitations Sent
   * Retrieve a list of invitations sent by the current user.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns InvitationsPublic Successful Response
   * @throws ApiError
   */
  public static readInvitationsSent(
    data: InvitationsReadInvitationsSentData = {},
  ): CancelablePromise<InvitationsReadInvitationsSentResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/invitations/sent",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Invitations Team By Admin
   * Retrieve a list of invitations sent by the current user.
   * @param data The data for the request.
   * @param data.teamId
   * @param data.skip
   * @param data.limit
   * @param data.status
   * @returns InvitationsPublic Successful Response
   * @throws ApiError
   */
  public static readInvitationsTeamByAdmin(
    data: InvitationsReadInvitationsTeamByAdminData,
  ): CancelablePromise<InvitationsReadInvitationsTeamByAdminResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/invitations/team/{team_id}",
      path: {
        team_id: data.teamId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
        status: data.status,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Invitation
   * Create new invitation.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns InvitationPublic Successful Response
   * @throws ApiError
   */
  public static createInvitation(
    data: InvitationsCreateInvitationData,
  ): CancelablePromise<InvitationsCreateInvitationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/invitations/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Accept Invitation
   * Accept an invitation.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns InvitationPublic Successful Response
   * @throws ApiError
   */
  public static acceptInvitation(
    data: InvitationsAcceptInvitationData,
  ): CancelablePromise<InvitationsAcceptInvitationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/invitations/accept",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Verify Invitation
   * Verify an invitation token.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns InvitationPublic Successful Response
   * @throws ApiError
   */
  public static verifyInvitation(
    data: InvitationsVerifyInvitationData,
  ): CancelablePromise<InvitationsVerifyInvitationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/invitations/token/verify",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Invitation
   * Delete an invitation.
   * @param data The data for the request.
   * @param data.invId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteInvitation(
    data: InvitationsDeleteInvitationData,
  ): CancelablePromise<InvitationsDeleteInvitationResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/invitations/{inv_id}",
      path: {
        inv_id: data.invId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get the access token and the user data
   * @param data The data for the request.
   * @param data.formData
   * @returns AccessTokenWithUserMe Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Device Authorization
   * Device Authorization Grant
   * @param data The data for the request.
   * @param data.formData
   * @returns DeviceAuthorizationResponse Successful Response
   * @throws ApiError
   */
  public static deviceAuthorization(
    data: LoginDeviceAuthorizationData,
  ): CancelablePromise<LoginDeviceAuthorizationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/device/authorization",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Device Authorization Info
   * Get device authorization info
   * @param data The data for the request.
   * @param data.userCode
   * @returns DeviceAuthorizationInfo Successful Response
   * @throws ApiError
   */
  public static deviceAuthorizationInfo(
    data: LoginDeviceAuthorizationInfoData,
  ): CancelablePromise<LoginDeviceAuthorizationInfoResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/login/device/authorization/{user_code}",
      path: {
        user_code: data.userCode,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Login Token
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginToken(
    data: LoginLoginTokenData,
  ): CancelablePromise<LoginLoginTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/device/token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Authorize Device
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static authorizeDevice(
    data: LoginAuthorizeDeviceData,
  ): CancelablePromise<LoginAuthorizeDeviceResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/device/authorize",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Team
   * Create a new team.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TeamPublic Successful Response
   * @throws ApiError
   */
  public static createTeam(
    data: PrivateCreateTeamData,
  ): CancelablePromise<PrivateCreateTeamResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/teams/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add User To Team
   * Add user to team.
   * @param data The data for the request.
   * @param data.teamId
   * @param data.requestBody
   * @returns UserTeamLinkPublic Successful Response
   * @throws ApiError
   */
  public static addUserToTeam(
    data: PrivateAddUserToTeamData,
  ): CancelablePromise<PrivateAddUserToTeamResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/teams/{team_id}/add-user",
      path: {
        team_id: data.teamId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create App
   * Create a new app.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AppPublic Successful Response
   * @throws ApiError
   */
  public static createApp(
    data: PrivateCreateAppData,
  ): CancelablePromise<PrivateCreateAppResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/apps/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Deployment
   * Create a new deployment.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns DeploymentPublic Successful Response
   * @throws ApiError
   */
  public static createDeployment(
    data: PrivateCreateDeploymentData,
  ): CancelablePromise<PrivateCreateDeploymentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/deployments/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Environment Variable
   * Create a new environment variable.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns EnvironmentVariable Successful Response
   * @throws ApiError
   */
  public static createEnvironmentVariable(
    data: PrivateCreateEnvironmentVariableData,
  ): CancelablePromise<PrivateCreateEnvironmentVariableResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/environment-variables/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class TeamsService {
  /**
   * Read Teams
   * Retrieve a list of teams accessible to the current user.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.orderBy
   * @param data.order
   * @param data.owner
   * @param data.slug
   * @returns TeamsPublic Successful Response
   * @throws ApiError
   */
  public static readTeams(
    data: TeamsReadTeamsData = {},
  ): CancelablePromise<TeamsReadTeamsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/teams/",
      query: {
        skip: data.skip,
        limit: data.limit,
        order_by: data.orderBy,
        order: data.order,
        owner: data.owner,
        slug: data.slug,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Team
   * Create a new team with the provided details.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TeamPublic Successful Response
   * @throws ApiError
   */
  public static createTeam(
    data: TeamsCreateTeamData,
  ): CancelablePromise<TeamsCreateTeamResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/teams/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Team
   * Retrieve a team by its name and returns it along with its associated users.
   * @param data The data for the request.
   * @param data.teamId
   * @returns TeamWithUserPublic Successful Response
   * @throws ApiError
   */
  public static readTeam(
    data: TeamsReadTeamData,
  ): CancelablePromise<TeamsReadTeamResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/teams/{team_id}",
      path: {
        team_id: data.teamId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Team
   * Update an team by its name.
   * @param data The data for the request.
   * @param data.teamId
   * @param data.requestBody
   * @returns TeamPublic Successful Response
   * @throws ApiError
   */
  public static updateTeam(
    data: TeamsUpdateTeamData,
  ): CancelablePromise<TeamsUpdateTeamResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/teams/{team_id}",
      path: {
        team_id: data.teamId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Team
   * Delete a team from the database by its name.
   * @param data The data for the request.
   * @param data.teamId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteTeam(
    data: TeamsDeleteTeamData,
  ): CancelablePromise<TeamsDeleteTeamResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/teams/{team_id}",
      path: {
        team_id: data.teamId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Transfer Team
   * Transfer team ownership to another user.
   * @param data The data for the request.
   * @param data.teamId
   * @param data.requestBody
   * @returns TeamPublic Successful Response
   * @throws ApiError
   */
  public static transferTeam(
    data: TeamsTransferTeamData,
  ): CancelablePromise<TeamsTransferTeamResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/teams/{team_id}/transfer-ownership/",
      path: {
        team_id: data.teamId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Member In Team
   * Update a member in a team.
   * @param data The data for the request.
   * @param data.teamId
   * @param data.userId
   * @param data.requestBody
   * @returns UserTeamLinkPublic Successful Response
   * @throws ApiError
   */
  public static updateMemberInTeam(
    data: TeamsUpdateMemberInTeamData,
  ): CancelablePromise<TeamsUpdateMemberInTeamResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/teams/{team_id}/users/{user_id}",
      path: {
        team_id: data.teamId,
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Member From Team
   * Remove a member from a team.
   * @param data The data for the request.
   * @param data.teamId
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removeMemberFromTeam(
    data: TeamsRemoveMemberFromTeamData,
  ): CancelablePromise<TeamsRemoveMemberFromTeamResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/teams/{team_id}/users/{user_id}",
      path: {
        team_id: data.teamId,
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Validate Team Name
   * Validate if team name is unique
   * @param data The data for the request.
   * @param data.teamSlug
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static validateTeamName(
    data: TeamsValidateTeamNameData,
  ): CancelablePromise<TeamsValidateTeamNameResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/teams/validate-team-name/{team_slug}",
      path: {
        team_slug: data.teamSlug,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read User Me
   * Get current user.
   * @returns UserMePublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Request Email Update
   * Request to update own user email.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static requestEmailUpdate(
    data: UsersRequestEmailUpdateData,
  ): CancelablePromise<UsersRequestEmailUpdateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/me/email",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Verify Update Email Token
   * Verify email update token.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static verifyUpdateEmailToken(
    data: UsersVerifyUpdateEmailTokenData,
  ): CancelablePromise<UsersVerifyUpdateEmailTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/me/verify-update-email",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Verify Email Token
   * Verify email token
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static verifyEmailToken(
    data: UsersVerifyEmailTokenData,
  ): CancelablePromise<UsersVerifyEmailTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/verify-email",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Resend Verification Email
   * Resend verification email to user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resendVerificationEmail(
    data: UsersResendVerificationEmailData,
  ): CancelablePromise<UsersResendVerificationEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/resend-verification",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add To Waiting List
   * Add user to waiting list
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static addToWaitingList(
    data: UsersAddToWaitingListData,
  ): CancelablePromise<UsersAddToWaitingListResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/waiting-list",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Health Check
   * Health check.
   * @returns HealthCheckResponse Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
