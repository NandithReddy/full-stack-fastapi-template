// This file is auto-generated by @hey-api/openapi-ts

export type AccessTokenWithUserMe = {
  access_token: string
  token_type?: string
  user: UserMePublic
}

export type AddUserToTeam = {
  user_id: string
  role: Role
}

export type AppCreate = {
  name: string
  team_id: string
}

export type AppPublic = {
  name: string
  id: string
  team_id: string
  slug: string
  created_at: string
  updated_at: string
  url: string
  is_fresh: boolean | null
}

export type AppsPublic = {
  data: Array<AppPublic>
  count: number
}

export type AuthorizeDeviceIn = {
  user_code: string
}

export type Body_login_device_authorization = {
  client_id: string
}

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type Body_login_login_token = {
  client_id: string
  device_code: string
  grant_type: "urn:ietf:params:oauth:grant-type:device_code"
}

export type CreateApp = {
  name: string
  team_id: string
}

export type CreateDeployment = {
  app_id: string
  status?: DeploymentStatus | null
}

export type CreateEnvironmentVariable = {
  name: string
  value: string
  app_id: string
}

export type CreateTeam = {
  name: string
  owner_id: string
  is_personal_team?: boolean
}

export type CreateUser = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

export type DeploymentPublic = {
  id: string
  app_id: string
  slug: string
  created_at: string
  updated_at: string
  status: DeploymentStatus
  url: string
  dashboard_url: string
}

export type DeploymentsPublic = {
  data: Array<DeploymentPublic>
  count: number
}

export type DeploymentStatus =
  | "waiting_upload"
  | "ready_for_build"
  | "building"
  | "extracting"
  | "building_image"
  | "deploying"
  | "success"
  | "failed"

export type DeploymentUploadOut = {
  url: string
  fields: {
    [key: string]: unknown
  }
}

export type DeviceAuthorizationInfo = {
  device_code: string
  created_at: string
  request_ip: string | null
}

export type DeviceAuthorizationResponse = {
  device_code: string
  user_code: string
  verification_uri: string
  verification_uri_complete: string
  expires_in: number
  interval: number
}

export type EmailVerificationToken = {
  token: string
}

export type EnvironmentVariable = {
  app_id: string
  name: string
  value: string
  created_at?: string
  updated_at?: string
}

export type EnvironmentVariableCreate = {
  name: string
  value: string
}

export type EnvironmentVariablePublic = {
  name: string
  value: string
  created_at: string
  updated_at: string
}

export type EnvironmentVariablesPublic = {
  data: Array<EnvironmentVariablePublic>
  count: number
}

export type EnvironmentVariableUpdate = {
  value: string
}

export type HealthCheckResponse = {
  redis: boolean
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type InvitationCreate = {
  role: Role
  email: string
  team_id: string
}

export type InvitationPublic = {
  role: Role
  email: string
  id: string
  team_id: string
  invited_by_id: string
  status: InvitationStatus
  created_at: string
  sender: UserPublic
  team: TeamPublic
}

export type InvitationsPublic = {
  data: Array<InvitationPublic>
  count: number
}

export type InvitationStatus = "pending" | "accepted"

export type InvitationToken = {
  token: string
}

export type Log = {
  team?: string | null
  app?: string | null
  deployment?: string | null
  timestamp: string
  message: string
}

export type LogsResponse = {
  logs: Array<Log>
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type Role = "member" | "admin"

export type TeamCreate = {
  name: string
  description?: string | null
}

export type TeamPublic = {
  name: string
  description?: string | null
  id: string
  slug: string
  is_personal_team: boolean
  owner_id: string
}

export type TeamsPublic = {
  data: Array<TeamPublic>
  count: number
}

export type TeamUpdate = {
  name?: string | null
  description?: string | null
}

export type TeamUpdateMember = {
  role: Role
}

export type TeamWithUserPublic = {
  name: string
  description?: string | null
  id: string
  slug: string
  is_personal_team: boolean
  owner_id: string
  user_links: Array<UserLinkPublic>
}

export type Token = {
  access_token: string
  token_type?: string
}

export type TransferTeamOwnership = {
  user_id: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserLinkPublic = {
  role: Role
  user: UserPublic
}

export type UserMePublic = {
  email: string
  is_active?: boolean
  full_name: string
  id: string
  personal_team_slug: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  full_name: string
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name: string
}

export type UserTeamLinkPublic = {
  user: UserPublic
  team: TeamPublic
  role: Role
}

export type UserUpdateEmailMe = {
  email: string
}

export type UserUpdateMe = {
  full_name: string
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type WaitingListUserCreate = {
  email: string
  name?: string | null
  organization?: string | null
  role?: string | null
  team_size?: string | null
  location?: string | null
  use_case?: string | null
  secret_code?: string | null
}

export type AppsReadEnvironmentVariablesData = {
  appId: string
}

export type AppsReadEnvironmentVariablesResponse = EnvironmentVariablesPublic

export type AppsCreateEnvironmentVariableData = {
  appId: string
  requestBody: EnvironmentVariableCreate
}

export type AppsCreateEnvironmentVariableResponse = EnvironmentVariablePublic

export type AppsUpdateEnvironmentVariablesData = {
  appId: string
  requestBody: {
    [key: string]: string | null
  }
}

export type AppsUpdateEnvironmentVariablesResponse = EnvironmentVariablesPublic

export type AppsDeleteEnvironmentVariableData = {
  appId: string
  environmentVariableName: string
}

export type AppsDeleteEnvironmentVariableResponse = Message

export type AppsUpdateEnvironmentVariableData = {
  appId: string
  environmentVariableName: string
  requestBody: EnvironmentVariableUpdate
}

export type AppsUpdateEnvironmentVariableResponse = EnvironmentVariablePublic

export type AppsReadAppsData = {
  limit?: number
  order?: "asc" | "desc"
  orderBy?: "created_at" | null
  skip?: number
  slug?: string | null
  teamId: string
}

export type AppsReadAppsResponse = AppsPublic

export type AppsCreateAppData = {
  requestBody: AppCreate
}

export type AppsCreateAppResponse = AppPublic

export type AppsReadAppData = {
  appId: string
}

export type AppsReadAppResponse = AppPublic

export type AppsDeleteAppData = {
  appId: string
}

export type AppsDeleteAppResponse = Message

export type AppsReadAppLogsData = {
  appId: string
}

export type AppsReadAppLogsResponse = LogsResponse

export type DeploymentsReadDeploymentsData = {
  appId: string
  limit?: number
  order?: "asc" | "desc"
  orderBy?: "created_at" | null
  skip?: number
}

export type DeploymentsReadDeploymentsResponse = DeploymentsPublic

export type DeploymentsCreateDeploymentData = {
  appId: string
}

export type DeploymentsCreateDeploymentResponse = DeploymentPublic

export type DeploymentsReadDeploymentData = {
  appId: string
  deploymentId: string
}

export type DeploymentsReadDeploymentResponse = DeploymentPublic

export type DeploymentsReadDeploymentLogsData = {
  deploymentId: string
}

export type DeploymentsReadDeploymentLogsResponse = LogsResponse

export type DeploymentsUploadDeploymentArtifactData = {
  deploymentId: string
}

export type DeploymentsUploadDeploymentArtifactResponse = DeploymentUploadOut

export type DeploymentsRedeployDeploymentData = {
  deploymentId: string
}

export type DeploymentsRedeployDeploymentResponse = unknown

export type DeploymentsUploadCompleteData = {
  deploymentId: string
}

export type DeploymentsUploadCompleteResponse = unknown

export type DeploymentsGetBuildLogsData = {
  deploymentId: string
}

export type DeploymentsGetBuildLogsResponse = unknown

export type InvitationsReadInvitationsMeData = {
  limit?: number
  skip?: number
}

export type InvitationsReadInvitationsMeResponse = InvitationsPublic

export type InvitationsReadInvitationsSentData = {
  limit?: number
  skip?: number
}

export type InvitationsReadInvitationsSentResponse = InvitationsPublic

export type InvitationsReadInvitationsTeamByAdminData = {
  limit?: number
  skip?: number
  status?: InvitationStatus | null
  teamId: string
}

export type InvitationsReadInvitationsTeamByAdminResponse = InvitationsPublic

export type InvitationsCreateInvitationData = {
  requestBody: InvitationCreate
}

export type InvitationsCreateInvitationResponse = InvitationPublic

export type InvitationsAcceptInvitationData = {
  requestBody: InvitationToken
}

export type InvitationsAcceptInvitationResponse = InvitationPublic

export type InvitationsVerifyInvitationData = {
  requestBody: InvitationToken
}

export type InvitationsVerifyInvitationResponse = InvitationPublic

export type InvitationsDeleteInvitationData = {
  invId: string
}

export type InvitationsDeleteInvitationResponse = Message

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = AccessTokenWithUserMe

export type LoginDeviceAuthorizationData = {
  formData: Body_login_device_authorization
}

export type LoginDeviceAuthorizationResponse = DeviceAuthorizationResponse

export type LoginDeviceAuthorizationInfoData = {
  userCode: string
}

export type LoginDeviceAuthorizationInfoResponse = DeviceAuthorizationInfo

export type LoginLoginTokenData = {
  formData: Body_login_login_token
}

export type LoginLoginTokenResponse = Token

export type LoginAuthorizeDeviceData = {
  requestBody: AuthorizeDeviceIn
}

export type LoginAuthorizeDeviceResponse = unknown

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type PrivateCreateUserData = {
  requestBody: CreateUser
}

export type PrivateCreateUserResponse = UserPublic

export type PrivateCreateTeamData = {
  requestBody: CreateTeam
}

export type PrivateCreateTeamResponse = TeamPublic

export type PrivateAddUserToTeamData = {
  requestBody: AddUserToTeam
  teamId: string
}

export type PrivateAddUserToTeamResponse = UserTeamLinkPublic

export type PrivateCreateAppData = {
  requestBody: CreateApp
}

export type PrivateCreateAppResponse = AppPublic

export type PrivateCreateDeploymentData = {
  requestBody: CreateDeployment
}

export type PrivateCreateDeploymentResponse = DeploymentPublic

export type PrivateCreateEnvironmentVariableData = {
  requestBody: CreateEnvironmentVariable
}

export type PrivateCreateEnvironmentVariableResponse = EnvironmentVariable

export type TeamsReadTeamsData = {
  limit?: number
  order?: "asc" | "desc"
  orderBy?: "created_at" | null
  owner?: boolean
  skip?: number
  slug?: string | null
}

export type TeamsReadTeamsResponse = TeamsPublic

export type TeamsCreateTeamData = {
  requestBody: TeamCreate
}

export type TeamsCreateTeamResponse = TeamPublic

export type TeamsReadTeamData = {
  teamId: string
}

export type TeamsReadTeamResponse = TeamWithUserPublic

export type TeamsUpdateTeamData = {
  requestBody: TeamUpdate
  teamId: string
}

export type TeamsUpdateTeamResponse = TeamPublic

export type TeamsDeleteTeamData = {
  teamId: string
}

export type TeamsDeleteTeamResponse = Message

export type TeamsTransferTeamData = {
  requestBody: TransferTeamOwnership
  teamId: string
}

export type TeamsTransferTeamResponse = TeamPublic

export type TeamsUpdateMemberInTeamData = {
  requestBody: TeamUpdateMember
  teamId: string
  userId: string
}

export type TeamsUpdateMemberInTeamResponse = UserTeamLinkPublic

export type TeamsRemoveMemberFromTeamData = {
  teamId: string
  userId: string
}

export type TeamsRemoveMemberFromTeamResponse = Message

export type TeamsValidateTeamNameData = {
  teamSlug: string
}

export type TeamsValidateTeamNameResponse = Message

export type UsersReadUserMeResponse = UserMePublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersRequestEmailUpdateData = {
  requestBody: UserUpdateEmailMe
}

export type UsersRequestEmailUpdateResponse = Message

export type UsersVerifyUpdateEmailTokenData = {
  requestBody: EmailVerificationToken
}

export type UsersVerifyUpdateEmailTokenResponse = Message

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersVerifyEmailTokenData = {
  requestBody: EmailVerificationToken
}

export type UsersVerifyEmailTokenResponse = unknown

export type UsersAddToWaitingListData = {
  requestBody: WaitingListUserCreate
}

export type UsersAddToWaitingListResponse = Message

export type UtilsHealthCheckResponse = HealthCheckResponse
