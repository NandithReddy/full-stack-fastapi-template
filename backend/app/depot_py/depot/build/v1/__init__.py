# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: build/v1/build.proto
# plugin: python-betterproto
# This file has been @generated

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from pydantic.dataclasses import dataclass

from typing import (
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase
from pydantic import model_validator
from pydantic.dataclasses import rebuild_dataclass


@dataclass(eq=False, repr=False)
class CreateBuildRequest(betterproto.Message):
    project_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CreateBuildResponse(betterproto.Message):
    build_id: str = betterproto.string_field(1)
    build_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class FinishBuildRequest(betterproto.Message):
    build_id: str = betterproto.string_field(1)
    success: Optional["FinishBuildRequestBuildSuccess"] = betterproto.message_field(
        2, optional=True, group="result"
    )
    error: Optional["FinishBuildRequestBuildError"] = betterproto.message_field(
        3, optional=True, group="result"
    )

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


@dataclass(eq=False, repr=False)
class FinishBuildRequestBuildSuccess(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FinishBuildRequestBuildError(betterproto.Message):
    error: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class FinishBuildResponse(betterproto.Message):
    pass


class BuildServiceStub(betterproto.ServiceStub):
    async def create_build(
        self,
        create_build_request: "CreateBuildRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "CreateBuildResponse":
        return await self._unary_unary(
            "/depot.build.v1.BuildService/CreateBuild",
            create_build_request,
            CreateBuildResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def finish_build(
        self,
        finish_build_request: "FinishBuildRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "FinishBuildResponse":
        return await self._unary_unary(
            "/depot.build.v1.BuildService/FinishBuild",
            finish_build_request,
            FinishBuildResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class BuildServiceBase(ServiceBase):
    async def create_build(
        self, create_build_request: "CreateBuildRequest"
    ) -> "CreateBuildResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def finish_build(
        self, finish_build_request: "FinishBuildRequest"
    ) -> "FinishBuildResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_build(
        self, stream: "grpclib.server.Stream[CreateBuildRequest, CreateBuildResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_build(request)
        await stream.send_message(response)

    async def __rpc_finish_build(
        self, stream: "grpclib.server.Stream[FinishBuildRequest, FinishBuildResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.finish_build(request)
        await stream.send_message(response)

    def __mapping__(self) -> dict[str, grpclib.const.Handler]:
        return {
            "/depot.build.v1.BuildService/CreateBuild": grpclib.const.Handler(
                self.__rpc_create_build,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateBuildRequest,
                CreateBuildResponse,
            ),
            "/depot.build.v1.BuildService/FinishBuild": grpclib.const.Handler(
                self.__rpc_finish_build,
                grpclib.const.Cardinality.UNARY_UNARY,
                FinishBuildRequest,
                FinishBuildResponse,
            ),
        }


rebuild_dataclass(FinishBuildRequest)  # type: ignore
