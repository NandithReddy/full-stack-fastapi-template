# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: core/v1/build.proto, core/v1/project.proto
# plugin: python-betterproto
# This file has been @generated
import warnings
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from pydantic.dataclasses import dataclass

from datetime import datetime
from typing import (
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase
from pydantic import model_validator
from pydantic.dataclasses import rebuild_dataclass


class BuildStatus(betterproto.Enum):
    STATUS_UNSPECIFIED = 0
    STATUS_RUNNING = 1
    STATUS_FAILED = 2
    STATUS_SUCCESS = 3
    STATUS_ERROR = 4
    STATUS_CANCELED = 5

    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        from pydantic_core import core_schema

        return core_schema.int_schema(ge=0)


class Hardware(betterproto.Enum):
    """Hardware represents the hardware configuration of a project."""

    UNSPECIFIED = 0
    """By default is 16 CPU and 32GB of memory."""

    _16X32 = 1
    """16 CPU and 32GB of memory."""

    _4X4 = 2
    """4 CPU and 4GB of memory."""

    _8X8 = 3
    """8 CPU and 8GB of memory."""

    _8X16 = 4
    """8 CPU and 16GB of memory."""

    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        from pydantic_core import core_schema

        return core_schema.int_schema(ge=0)


@dataclass(eq=False, repr=False)
class ShareBuildRequest(betterproto.Message):
    build_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ShareBuildResponse(betterproto.Message):
    share_url: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class StopSharingBuildRequest(betterproto.Message):
    build_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class StopSharingBuildResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListBuildsRequest(betterproto.Message):
    project_id: str = betterproto.string_field(1)
    page_size: int | None = betterproto.int32_field(2, optional=True)
    page_token: str | None = betterproto.string_field(3, optional=True)


@dataclass(eq=False, repr=False)
class ListBuildsResponse(betterproto.Message):
    builds: list["Build"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetBuildRequest(betterproto.Message):
    build_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetBuildResponse(betterproto.Message):
    build: "Build" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Build(betterproto.Message):
    build_id: str = betterproto.string_field(1)
    status: "BuildStatus" = betterproto.enum_field(2)
    created_at: datetime = betterproto.message_field(3)
    started_at: datetime | None = betterproto.message_field(4, optional=True)
    finished_at: datetime | None = betterproto.message_field(5, optional=True)
    build_duration_seconds: int | None = betterproto.int32_field(6, optional=True)
    saved_duration_seconds: int | None = betterproto.int32_field(7, optional=True)
    cached_steps: int | None = betterproto.int32_field(8, optional=True)
    total_steps: int | None = betterproto.int32_field(9, optional=True)


@dataclass(eq=False, repr=False)
class Project(betterproto.Message):
    project_id: str = betterproto.string_field(1)
    organization_id: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    region_id: str = betterproto.string_field(4)
    created_at: datetime = betterproto.message_field(5)
    cache_policy: "CachePolicy" = betterproto.message_field(6)
    hardware: "Hardware" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class ListProjectsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListProjectsResponse(betterproto.Message):
    projects: list["Project"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetProjectRequest(betterproto.Message):
    project_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetProjectResponse(betterproto.Message):
    project: "Project" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateProjectRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    organization_id: str | None = betterproto.string_field(2, optional=True)
    region_id: str = betterproto.string_field(3)
    cache_policy: Optional["CachePolicy"] = betterproto.message_field(4, optional=True)
    hardware: Optional["Hardware"] = betterproto.enum_field(5, optional=True)


@dataclass(eq=False, repr=False)
class CreateProjectResponse(betterproto.Message):
    project: "Project" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UpdateProjectRequest(betterproto.Message):
    project_id: str = betterproto.string_field(1)
    name: str | None = betterproto.string_field(2, optional=True)
    region_id: str | None = betterproto.string_field(3, optional=True)
    cache_policy: Optional["CachePolicy"] = betterproto.message_field(4, optional=True)
    hardware: Optional["Hardware"] = betterproto.enum_field(5, optional=True)


@dataclass(eq=False, repr=False)
class UpdateProjectResponse(betterproto.Message):
    project: "Project" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeleteProjectRequest(betterproto.Message):
    project_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteProjectResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ResetProjectRequest(betterproto.Message):
    project_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResetProjectResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CachePolicy(betterproto.Message):
    keep_bytes: int | None = betterproto.int64_field(1, optional=True)
    keep_days: int = betterproto.int32_field(2)
    keep_gb: int = betterproto.int32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("keep_bytes"):
            warnings.warn("CachePolicy.keep_bytes is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class ListTrustPoliciesRequest(betterproto.Message):
    project_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListTrustPoliciesResponse(betterproto.Message):
    trust_policies: list["TrustPolicy"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AddTrustPolicyRequest(betterproto.Message):
    project_id: str = betterproto.string_field(1)
    buildkite: Optional["TrustPolicyBuildkite"] = betterproto.message_field(
        2, optional=True, group="provider"
    )
    circleci: Optional["TrustPolicyCircleCi"] = betterproto.message_field(
        3, optional=True, group="provider"
    )
    github: Optional["TrustPolicyGitHub"] = betterproto.message_field(
        4, optional=True, group="provider"
    )

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


@dataclass(eq=False, repr=False)
class AddTrustPolicyResponse(betterproto.Message):
    trust_policy: "TrustPolicy" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RemoveTrustPolicyRequest(betterproto.Message):
    project_id: str = betterproto.string_field(1)
    trust_policy_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RemoveTrustPolicyResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TrustPolicy(betterproto.Message):
    trust_policy_id: str = betterproto.string_field(1)
    buildkite: Optional["TrustPolicyBuildkite"] = betterproto.message_field(
        2, optional=True, group="provider"
    )
    circleci: Optional["TrustPolicyCircleCi"] = betterproto.message_field(
        3, optional=True, group="provider"
    )
    github: Optional["TrustPolicyGitHub"] = betterproto.message_field(
        4, optional=True, group="provider"
    )

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


@dataclass(eq=False, repr=False)
class TrustPolicyGitHub(betterproto.Message):
    repository_owner: str = betterproto.string_field(1)
    """The GitHub organization or user name"""

    repository: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TrustPolicyCircleCi(betterproto.Message):
    organization_uuid: str = betterproto.string_field(1)
    """
    CircleCI organization UUID must be a valid UUID, not the friendly organization ID.
    """

    project_uuid: str = betterproto.string_field(2)
    """
    CircleCI project UUID must be a valid UUID, not the friendly project ID
    """


@dataclass(eq=False, repr=False)
class TrustPolicyBuildkite(betterproto.Message):
    organization_slug: str = betterproto.string_field(1)
    pipeline_slug: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ListTokensRequest(betterproto.Message):
    project_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListTokensResponse(betterproto.Message):
    tokens: list["ListTokensResponseToken"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListTokensResponseToken(betterproto.Message):
    token_id: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CreateTokenRequest(betterproto.Message):
    project_id: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CreateTokenResponse(betterproto.Message):
    token_id: str = betterproto.string_field(1)
    secret: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class UpdateTokenRequest(betterproto.Message):
    token_id: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class UpdateTokenResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DeleteTokenRequest(betterproto.Message):
    token_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteTokenResponse(betterproto.Message):
    pass


class BuildServiceStub(betterproto.ServiceStub):
    async def share_build(
        self,
        share_build_request: "ShareBuildRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ShareBuildResponse":
        return await self._unary_unary(
            "/depot.core.v1.BuildService/ShareBuild",
            share_build_request,
            ShareBuildResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_sharing_build(
        self,
        stop_sharing_build_request: "StopSharingBuildRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "StopSharingBuildResponse":
        return await self._unary_unary(
            "/depot.core.v1.BuildService/StopSharingBuild",
            stop_sharing_build_request,
            StopSharingBuildResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_builds(
        self,
        list_builds_request: "ListBuildsRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ListBuildsResponse":
        return await self._unary_unary(
            "/depot.core.v1.BuildService/ListBuilds",
            list_builds_request,
            ListBuildsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_build(
        self,
        get_build_request: "GetBuildRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetBuildResponse":
        return await self._unary_unary(
            "/depot.core.v1.BuildService/GetBuild",
            get_build_request,
            GetBuildResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ProjectServiceStub(betterproto.ServiceStub):
    async def list_projects(
        self,
        list_projects_request: "ListProjectsRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ListProjectsResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/ListProjects",
            list_projects_request,
            ListProjectsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_project(
        self,
        get_project_request: "GetProjectRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetProjectResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/GetProject",
            get_project_request,
            GetProjectResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_project(
        self,
        create_project_request: "CreateProjectRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "CreateProjectResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/CreateProject",
            create_project_request,
            CreateProjectResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_project(
        self,
        update_project_request: "UpdateProjectRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "UpdateProjectResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/UpdateProject",
            update_project_request,
            UpdateProjectResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_project(
        self,
        delete_project_request: "DeleteProjectRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "DeleteProjectResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/DeleteProject",
            delete_project_request,
            DeleteProjectResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def reset_project(
        self,
        reset_project_request: "ResetProjectRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResetProjectResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/ResetProject",
            reset_project_request,
            ResetProjectResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_trust_policies(
        self,
        list_trust_policies_request: "ListTrustPoliciesRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ListTrustPoliciesResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/ListTrustPolicies",
            list_trust_policies_request,
            ListTrustPoliciesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_trust_policy(
        self,
        add_trust_policy_request: "AddTrustPolicyRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "AddTrustPolicyResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/AddTrustPolicy",
            add_trust_policy_request,
            AddTrustPolicyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_trust_policy(
        self,
        remove_trust_policy_request: "RemoveTrustPolicyRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "RemoveTrustPolicyResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/RemoveTrustPolicy",
            remove_trust_policy_request,
            RemoveTrustPolicyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_tokens(
        self,
        list_tokens_request: "ListTokensRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ListTokensResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/ListTokens",
            list_tokens_request,
            ListTokensResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_token(
        self,
        create_token_request: "CreateTokenRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "CreateTokenResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/CreateToken",
            create_token_request,
            CreateTokenResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_token(
        self,
        update_token_request: "UpdateTokenRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "UpdateTokenResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/UpdateToken",
            update_token_request,
            UpdateTokenResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_token(
        self,
        delete_token_request: "DeleteTokenRequest",
        *,
        timeout: float | None = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "DeleteTokenResponse":
        return await self._unary_unary(
            "/depot.core.v1.ProjectService/DeleteToken",
            delete_token_request,
            DeleteTokenResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class BuildServiceBase(ServiceBase):
    async def share_build(
        self, share_build_request: "ShareBuildRequest"
    ) -> "ShareBuildResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_sharing_build(
        self, stop_sharing_build_request: "StopSharingBuildRequest"
    ) -> "StopSharingBuildResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_builds(
        self, list_builds_request: "ListBuildsRequest"
    ) -> "ListBuildsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_build(
        self, get_build_request: "GetBuildRequest"
    ) -> "GetBuildResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_share_build(
        self, stream: "grpclib.server.Stream[ShareBuildRequest, ShareBuildResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.share_build(request)
        await stream.send_message(response)

    async def __rpc_stop_sharing_build(
        self,
        stream: "grpclib.server.Stream[StopSharingBuildRequest, StopSharingBuildResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_sharing_build(request)
        await stream.send_message(response)

    async def __rpc_list_builds(
        self, stream: "grpclib.server.Stream[ListBuildsRequest, ListBuildsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_builds(request)
        await stream.send_message(response)

    async def __rpc_get_build(
        self, stream: "grpclib.server.Stream[GetBuildRequest, GetBuildResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_build(request)
        await stream.send_message(response)

    def __mapping__(self) -> dict[str, grpclib.const.Handler]:
        return {
            "/depot.core.v1.BuildService/ShareBuild": grpclib.const.Handler(
                self.__rpc_share_build,
                grpclib.const.Cardinality.UNARY_UNARY,
                ShareBuildRequest,
                ShareBuildResponse,
            ),
            "/depot.core.v1.BuildService/StopSharingBuild": grpclib.const.Handler(
                self.__rpc_stop_sharing_build,
                grpclib.const.Cardinality.UNARY_UNARY,
                StopSharingBuildRequest,
                StopSharingBuildResponse,
            ),
            "/depot.core.v1.BuildService/ListBuilds": grpclib.const.Handler(
                self.__rpc_list_builds,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListBuildsRequest,
                ListBuildsResponse,
            ),
            "/depot.core.v1.BuildService/GetBuild": grpclib.const.Handler(
                self.__rpc_get_build,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBuildRequest,
                GetBuildResponse,
            ),
        }


class ProjectServiceBase(ServiceBase):
    async def list_projects(
        self, list_projects_request: "ListProjectsRequest"
    ) -> "ListProjectsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_project(
        self, get_project_request: "GetProjectRequest"
    ) -> "GetProjectResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_project(
        self, create_project_request: "CreateProjectRequest"
    ) -> "CreateProjectResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_project(
        self, update_project_request: "UpdateProjectRequest"
    ) -> "UpdateProjectResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_project(
        self, delete_project_request: "DeleteProjectRequest"
    ) -> "DeleteProjectResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def reset_project(
        self, reset_project_request: "ResetProjectRequest"
    ) -> "ResetProjectResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_trust_policies(
        self, list_trust_policies_request: "ListTrustPoliciesRequest"
    ) -> "ListTrustPoliciesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_trust_policy(
        self, add_trust_policy_request: "AddTrustPolicyRequest"
    ) -> "AddTrustPolicyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_trust_policy(
        self, remove_trust_policy_request: "RemoveTrustPolicyRequest"
    ) -> "RemoveTrustPolicyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_tokens(
        self, list_tokens_request: "ListTokensRequest"
    ) -> "ListTokensResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_token(
        self, create_token_request: "CreateTokenRequest"
    ) -> "CreateTokenResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_token(
        self, update_token_request: "UpdateTokenRequest"
    ) -> "UpdateTokenResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_token(
        self, delete_token_request: "DeleteTokenRequest"
    ) -> "DeleteTokenResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_projects(
        self, stream: "grpclib.server.Stream[ListProjectsRequest, ListProjectsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_projects(request)
        await stream.send_message(response)

    async def __rpc_get_project(
        self, stream: "grpclib.server.Stream[GetProjectRequest, GetProjectResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_project(request)
        await stream.send_message(response)

    async def __rpc_create_project(
        self,
        stream: "grpclib.server.Stream[CreateProjectRequest, CreateProjectResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_project(request)
        await stream.send_message(response)

    async def __rpc_update_project(
        self,
        stream: "grpclib.server.Stream[UpdateProjectRequest, UpdateProjectResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_project(request)
        await stream.send_message(response)

    async def __rpc_delete_project(
        self,
        stream: "grpclib.server.Stream[DeleteProjectRequest, DeleteProjectResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_project(request)
        await stream.send_message(response)

    async def __rpc_reset_project(
        self, stream: "grpclib.server.Stream[ResetProjectRequest, ResetProjectResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.reset_project(request)
        await stream.send_message(response)

    async def __rpc_list_trust_policies(
        self,
        stream: "grpclib.server.Stream[ListTrustPoliciesRequest, ListTrustPoliciesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_trust_policies(request)
        await stream.send_message(response)

    async def __rpc_add_trust_policy(
        self,
        stream: "grpclib.server.Stream[AddTrustPolicyRequest, AddTrustPolicyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_trust_policy(request)
        await stream.send_message(response)

    async def __rpc_remove_trust_policy(
        self,
        stream: "grpclib.server.Stream[RemoveTrustPolicyRequest, RemoveTrustPolicyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_trust_policy(request)
        await stream.send_message(response)

    async def __rpc_list_tokens(
        self, stream: "grpclib.server.Stream[ListTokensRequest, ListTokensResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_tokens(request)
        await stream.send_message(response)

    async def __rpc_create_token(
        self, stream: "grpclib.server.Stream[CreateTokenRequest, CreateTokenResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_token(request)
        await stream.send_message(response)

    async def __rpc_update_token(
        self, stream: "grpclib.server.Stream[UpdateTokenRequest, UpdateTokenResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_token(request)
        await stream.send_message(response)

    async def __rpc_delete_token(
        self, stream: "grpclib.server.Stream[DeleteTokenRequest, DeleteTokenResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_token(request)
        await stream.send_message(response)

    def __mapping__(self) -> dict[str, grpclib.const.Handler]:
        return {
            "/depot.core.v1.ProjectService/ListProjects": grpclib.const.Handler(
                self.__rpc_list_projects,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListProjectsRequest,
                ListProjectsResponse,
            ),
            "/depot.core.v1.ProjectService/GetProject": grpclib.const.Handler(
                self.__rpc_get_project,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetProjectRequest,
                GetProjectResponse,
            ),
            "/depot.core.v1.ProjectService/CreateProject": grpclib.const.Handler(
                self.__rpc_create_project,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateProjectRequest,
                CreateProjectResponse,
            ),
            "/depot.core.v1.ProjectService/UpdateProject": grpclib.const.Handler(
                self.__rpc_update_project,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateProjectRequest,
                UpdateProjectResponse,
            ),
            "/depot.core.v1.ProjectService/DeleteProject": grpclib.const.Handler(
                self.__rpc_delete_project,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteProjectRequest,
                DeleteProjectResponse,
            ),
            "/depot.core.v1.ProjectService/ResetProject": grpclib.const.Handler(
                self.__rpc_reset_project,
                grpclib.const.Cardinality.UNARY_UNARY,
                ResetProjectRequest,
                ResetProjectResponse,
            ),
            "/depot.core.v1.ProjectService/ListTrustPolicies": grpclib.const.Handler(
                self.__rpc_list_trust_policies,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListTrustPoliciesRequest,
                ListTrustPoliciesResponse,
            ),
            "/depot.core.v1.ProjectService/AddTrustPolicy": grpclib.const.Handler(
                self.__rpc_add_trust_policy,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddTrustPolicyRequest,
                AddTrustPolicyResponse,
            ),
            "/depot.core.v1.ProjectService/RemoveTrustPolicy": grpclib.const.Handler(
                self.__rpc_remove_trust_policy,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveTrustPolicyRequest,
                RemoveTrustPolicyResponse,
            ),
            "/depot.core.v1.ProjectService/ListTokens": grpclib.const.Handler(
                self.__rpc_list_tokens,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListTokensRequest,
                ListTokensResponse,
            ),
            "/depot.core.v1.ProjectService/CreateToken": grpclib.const.Handler(
                self.__rpc_create_token,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateTokenRequest,
                CreateTokenResponse,
            ),
            "/depot.core.v1.ProjectService/UpdateToken": grpclib.const.Handler(
                self.__rpc_update_token,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateTokenRequest,
                UpdateTokenResponse,
            ),
            "/depot.core.v1.ProjectService/DeleteToken": grpclib.const.Handler(
                self.__rpc_delete_token,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteTokenRequest,
                DeleteTokenResponse,
            ),
        }


rebuild_dataclass(ListBuildsResponse)  # type: ignore
rebuild_dataclass(GetBuildResponse)  # type: ignore
rebuild_dataclass(Build)  # type: ignore
rebuild_dataclass(Project)  # type: ignore
rebuild_dataclass(ListProjectsResponse)  # type: ignore
rebuild_dataclass(GetProjectResponse)  # type: ignore
rebuild_dataclass(CreateProjectRequest)  # type: ignore
rebuild_dataclass(CreateProjectResponse)  # type: ignore
rebuild_dataclass(UpdateProjectRequest)  # type: ignore
rebuild_dataclass(UpdateProjectResponse)  # type: ignore
rebuild_dataclass(ListTrustPoliciesResponse)  # type: ignore
rebuild_dataclass(AddTrustPolicyRequest)  # type: ignore
rebuild_dataclass(AddTrustPolicyResponse)  # type: ignore
rebuild_dataclass(TrustPolicy)  # type: ignore
rebuild_dataclass(ListTokensResponse)  # type: ignore
