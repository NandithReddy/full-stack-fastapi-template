[project]
name = "app"
version = "0.1.0"
description = ""
requires-python = "<4.0,>=3.12"
dependencies = [
    "fastapi[standard]>=0.115.0,<1.0.0",
    "python-multipart<1.0.0,>=0.0.7",
    "email-validator<3.0.0.0,>=2.1.0.post1",
    "passlib[bcrypt]<2.0.0,>=1.7.4",
    "tenacity<9.2.0,>=9.1.2",
    "pydantic>2.0",
    "emails<1.0,>=0.6",
    "gunicorn<23.1.0,>=23.0.0",
    "jinja2<4.0.0,>=3.1.2",
    "alembic<2.0.0,>=1.12.1",
    "httpx<1.0.0,>=0.25.1",
    "psycopg[binary]<4.0.0,>=3.1.13",
    "sqlmodel>=0.0.21,<1.0.0",
    # Pin bcrypt until passlib supports the latest
    "bcrypt==4.0.1",
    "pydantic-settings",
    "sentry-sdk[fastapi]",
    "pyjwt<3.0.0,>=2.8.0",
    "redis[hiredis]<6.4.1,>=6.4.0",
    "boto3-stubs[s3,ecr,sqs]<2.0.0,>=1.35.10",
    "boto3<2.0.0,>=1.35.10",
    "kubernetes<31.0.0,>=30.1.0",
    "betterproto>=2.0.0b7",
    "asyncer>=0.0.8",
    "cloudflare>=3.1.0",
    "logfire[fastapi,httpx,redis,sqlalchemy]>=2.3.0",
    "stamina>=24.3.0",
    "nats-py[nkeys]>=2.9.0",
    "posthog>=3.11.0",
    "alembic-postgresql-enum>=1.7.0",
    "fastapi-auth",
    "disposable-email-domains>=0.0.130",
]

[tool.uv]
dev-dependencies = [
    "pytest<8.5.0,>=8.4.1",
    "mypy<2.0.0,>=1.8.0",
    "ruff<1.0.0,>=0.2.2",
    "pre-commit<4.4.0,>=4.3.0",
    "types-passlib<2.0.0.0,>=1.7.7.20240106",
    "coverage[toml]>=7.4.3,<8.0.0",
    "time-machine<3.0.0,>=2.14.2",
    "types-docker<8.0.0.0,>=7.1.0.20240827",
    "kubernetes-typed<19.0.0,>=18.20.2",
    "respx>=0.21.1",
    "pytest-asyncio>=0.23.8",
]

[tool.uv.sources]
fastapi-auth = { workspace = true }

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic", "app/depot_py"]
enable_error_code = ["exhaustive-match"]

[tool.ruff]
target-version = "py312"
exclude = ["alembic", "app/depot_py"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused arguments in functions
    "T201",   # print statements are not allowed
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
    "B904", # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.coverage.run]
source = ["app"]
dynamic_context = "test_function"

[tool.coverage.report]
show_missing = true
sort = "-Cover"
omit = [
    "app/depot_py/*",
    "app/builder/*",
    "app/cloudflare_utils.py",
]

[tool.coverage.html]
show_contexts = true
